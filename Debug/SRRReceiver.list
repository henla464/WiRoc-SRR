
SRRReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b24  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c74  08005c74  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005c74  08005c74  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c74  08005c74  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000020  08005c9c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005c9c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124fd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  00032545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f82  00000000  00000000  00036770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c2a  00000000  00000000  0004c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085645  00000000  00000000  0005e31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000e39b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005bc4 	.word	0x08005bc4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	08005bc4 	.word	0x08005bc4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <CC2500_WriteByteSPI>:
#include "CC2500.h"
#include "main.h"

uint8_t CC2500_WriteByteSPI(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t writevalue)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af02      	add	r7, sp, #8
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	701a      	strb	r2, [r3, #0]
	uint8_t readvalue = 0;
 800040a:	2417      	movs	r4, #23
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_RESET);
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	6818      	ldr	r0, [r3, #0]
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	889b      	ldrh	r3, [r3, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	0019      	movs	r1, r3
 800041e:	f002 f99b 	bl	8002758 <HAL_GPIO_WritePin>
	if ( HAL_SPI_TransmitReceive(hspi, (uint8_t*) &writevalue, (uint8_t*) &readvalue, 1, 5 ) != HAL_OK)
 8000422:	193a      	adds	r2, r7, r4
 8000424:	1df9      	adds	r1, r7, #7
 8000426:	68f8      	ldr	r0, [r7, #12]
 8000428:	2305      	movs	r3, #5
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2301      	movs	r3, #1
 800042e:	f004 fc25 	bl	8004c7c <HAL_SPI_TransmitReceive>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <CC2500_WriteByteSPI+0x3e>
	{
		Error_Handler();
 8000436:	f001 fc09 	bl	8001c4c <Error_Handler>
	}
	while( hspi->State == HAL_SPI_STATE_BUSY );
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	225d      	movs	r2, #93	; 0x5d
 8000440:	5c9b      	ldrb	r3, [r3, r2]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b02      	cmp	r3, #2
 8000446:	d0f9      	beq.n	800043c <CC2500_WriteByteSPI+0x40>
	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_SET);
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	889b      	ldrh	r3, [r3, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	0019      	movs	r1, r3
 8000454:	f002 f980 	bl	8002758 <HAL_GPIO_WritePin>
	return readvalue;
 8000458:	2317      	movs	r3, #23
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	781b      	ldrb	r3, [r3, #0]
}
 800045e:	0018      	movs	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	b007      	add	sp, #28
 8000464:	bd90      	pop	{r4, r7, pc}

08000466 <CC2500_ReadRegister>:

uint8_t CC2500_ReadRegister(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t registerAddress)
{
 8000466:	b5b0      	push	{r4, r5, r7, lr}
 8000468:	b088      	sub	sp, #32
 800046a:	af02      	add	r7, sp, #8
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	701a      	strb	r2, [r3, #0]
	uint8_t readValues[2] = {0};
 8000474:	2514      	movs	r5, #20
 8000476:	197b      	adds	r3, r7, r5
 8000478:	2200      	movs	r2, #0
 800047a:	801a      	strh	r2, [r3, #0]
	uint8_t writeValues[2] = { registerAddress | 0xC0, 0xDB};
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2240      	movs	r2, #64	; 0x40
 8000482:	4252      	negs	r2, r2
 8000484:	4313      	orrs	r3, r2
 8000486:	b2da      	uxtb	r2, r3
 8000488:	2410      	movs	r4, #16
 800048a:	193b      	adds	r3, r7, r4
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	193b      	adds	r3, r7, r4
 8000490:	22db      	movs	r2, #219	; 0xdb
 8000492:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_RESET);
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	889b      	ldrh	r3, [r3, #4]
 800049c:	2200      	movs	r2, #0
 800049e:	0019      	movs	r1, r3
 80004a0:	f002 f95a 	bl	8002758 <HAL_GPIO_WritePin>
	if ( HAL_SPI_TransmitReceive(hspi, writeValues, readValues, 2, 5 ) != HAL_OK)
 80004a4:	197a      	adds	r2, r7, r5
 80004a6:	1939      	adds	r1, r7, r4
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	2305      	movs	r3, #5
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2302      	movs	r3, #2
 80004b0:	f004 fbe4 	bl	8004c7c <HAL_SPI_TransmitReceive>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <CC2500_ReadRegister+0x56>
	{
		Error_Handler();
 80004b8:	f001 fbc8 	bl	8001c4c <Error_Handler>
	}
	while( hspi->State == HAL_SPI_STATE_BUSY );
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	225d      	movs	r2, #93	; 0x5d
 80004c2:	5c9b      	ldrb	r3, [r3, r2]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d0f9      	beq.n	80004be <CC2500_ReadRegister+0x58>

	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_SET);
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	889b      	ldrh	r3, [r3, #4]
 80004d2:	2201      	movs	r2, #1
 80004d4:	0019      	movs	r1, r3
 80004d6:	f002 f93f 	bl	8002758 <HAL_GPIO_WritePin>
	return readValues[1];
 80004da:	2314      	movs	r3, #20
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	785b      	ldrb	r3, [r3, #1]
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b006      	add	sp, #24
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}

080004e8 <CC2500_WriteRegister>:

uint8_t CC2500_WriteRegister(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t registerAddress, uint8_t data)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	0019      	movs	r1, r3
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	uint8_t readValues[2] = {0};
 80004fe:	2514      	movs	r5, #20
 8000500:	197b      	adds	r3, r7, r5
 8000502:	2200      	movs	r2, #0
 8000504:	801a      	strh	r2, [r3, #0]
	uint8_t writeValues[2] = { registerAddress | 0x40, data};
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2240      	movs	r2, #64	; 0x40
 800050c:	4313      	orrs	r3, r2
 800050e:	b2da      	uxtb	r2, r3
 8000510:	2410      	movs	r4, #16
 8000512:	193b      	adds	r3, r7, r4
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	193b      	adds	r3, r7, r4
 8000518:	1dba      	adds	r2, r7, #6
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_RESET);
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	889b      	ldrh	r3, [r3, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	0019      	movs	r1, r3
 800052a:	f002 f915 	bl	8002758 <HAL_GPIO_WritePin>
	if ( HAL_SPI_TransmitReceive(hspi, writeValues, readValues, 2, 5 ) != HAL_OK)
 800052e:	197a      	adds	r2, r7, r5
 8000530:	1939      	adds	r1, r7, r4
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	2305      	movs	r3, #5
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	f004 fb9f 	bl	8004c7c <HAL_SPI_TransmitReceive>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <CC2500_WriteRegister+0x5e>
	{
		Error_Handler();
 8000542:	f001 fb83 	bl	8001c4c <Error_Handler>
	}
	while( hspi->State == HAL_SPI_STATE_BUSY );
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	225d      	movs	r2, #93	; 0x5d
 800054c:	5c9b      	ldrb	r3, [r3, r2]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b02      	cmp	r3, #2
 8000552:	d0f9      	beq.n	8000548 <CC2500_WriteRegister+0x60>

	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_SET);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	889b      	ldrh	r3, [r3, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	0019      	movs	r1, r3
 8000560:	f002 f8fa 	bl	8002758 <HAL_GPIO_WritePin>
	return readValues[1];
 8000564:	2314      	movs	r3, #20
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	785b      	ldrb	r3, [r3, #1]
}
 800056a:	0018      	movs	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	b006      	add	sp, #24
 8000570:	bdb0      	pop	{r4, r5, r7, pc}

08000572 <CC2500_WriteReadBytesSPI>:



void CC2500_WriteReadBytesSPI(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t* writeValues, uint8_t* readValues, uint8_t length)
{
 8000572:	b590      	push	{r4, r7, lr}
 8000574:	b087      	sub	sp, #28
 8000576:	af02      	add	r7, sp, #8
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
 800057e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_RESET);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	889b      	ldrh	r3, [r3, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	0019      	movs	r1, r3
 800058c:	f002 f8e4 	bl	8002758 <HAL_GPIO_WritePin>
	if ( HAL_SPI_TransmitReceive(hspi, writeValues, readValues, length, 100 ) != HAL_OK)
 8000590:	2320      	movs	r3, #32
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b29b      	uxth	r3, r3
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	2464      	movs	r4, #100	; 0x64
 80005a0:	9400      	str	r4, [sp, #0]
 80005a2:	f004 fb6b 	bl	8004c7c <HAL_SPI_TransmitReceive>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <CC2500_WriteReadBytesSPI+0x3c>
	{
		Error_Handler();
 80005aa:	f001 fb4f 	bl	8001c4c <Error_Handler>
	}
	while( hspi->State == HAL_SPI_STATE_BUSY );
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	225d      	movs	r2, #93	; 0x5d
 80005b4:	5c9b      	ldrb	r3, [r3, r2]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d0f9      	beq.n	80005b0 <CC2500_WriteReadBytesSPI+0x3e>
	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_SET);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	0019      	movs	r1, r3
 80005c8:	f002 f8c6 	bl	8002758 <HAL_GPIO_WritePin>
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b005      	add	sp, #20
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <CC2500_SetGDO0OutputPinConfiguration>:
{
	CC2500_WriteRegister(hspi, chipSelectPin, 0x00, data);
}

void CC2500_SetGDO0OutputPinConfiguration(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x02, data);
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	68b9      	ldr	r1, [r7, #8]
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	2202      	movs	r2, #2
 80005ec:	f7ff ff7c 	bl	80004e8 <CC2500_WriteRegister>
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b004      	add	sp, #16
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <CC2500_SetPacketLength>:
	return status;
}


void CC2500_SetPacketLength(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t length)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x06, length);
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	2206      	movs	r2, #6
 8000610:	f7ff ff6a 	bl	80004e8 <CC2500_WriteRegister>
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b004      	add	sp, #16
 800061a:	bd80      	pop	{r7, pc}

0800061c <CC2500_SetPacketAutomationControl>:

void CC2500_SetPacketAutomationControl(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x08, data);
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	2208      	movs	r2, #8
 8000634:	f7ff ff58 	bl	80004e8 <CC2500_WriteRegister>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b004      	add	sp, #16
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC2500_SetMainRadioControlStateMachineConfiguration1>:

void CC2500_SetMainRadioControlStateMachineConfiguration1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x17, data);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	2217      	movs	r2, #23
 8000658:	f7ff ff46 	bl	80004e8 <CC2500_WriteRegister>
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}

08000664 <CC2500_SetMainRadioControlStateMachineConfiguration0>:

void CC2500_SetMainRadioControlStateMachineConfiguration0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x18, data);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	2218      	movs	r2, #24
 800067c:	f7ff ff34 	bl	80004e8 <CC2500_WriteRegister>
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b004      	add	sp, #16
 8000686:	bd80      	pop	{r7, pc}

08000688 <CC2500_SetChannelNumber>:

void CC2500_SetChannelNumber(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0A, data);
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	220a      	movs	r2, #10
 80006a0:	f7ff ff22 	bl	80004e8 <CC2500_WriteRegister>
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b004      	add	sp, #16
 80006aa:	bd80      	pop	{r7, pc}

080006ac <CC2500_SetFrequencySynthesizerControl1>:

void CC2500_SetFrequencySynthesizerControl1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0B, data);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	220b      	movs	r2, #11
 80006c4:	f7ff ff10 	bl	80004e8 <CC2500_WriteRegister>
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b004      	add	sp, #16
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <CC2500_SetFrequencySynthesizerControl0>:

void CC2500_SetFrequencySynthesizerControl0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0C, data);
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	220c      	movs	r2, #12
 80006e8:	f7ff fefe 	bl	80004e8 <CC2500_WriteRegister>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <CC2500_SetFrequencyHighByte>:

void CC2500_SetFrequencyHighByte(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0D, data);
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	68b9      	ldr	r1, [r7, #8]
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	220d      	movs	r2, #13
 800070c:	f7ff feec 	bl	80004e8 <CC2500_WriteRegister>
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b004      	add	sp, #16
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC2500_SetFrequencyMiddleByte>:

void CC2500_SetFrequencyMiddleByte(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0E, data);
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	68b9      	ldr	r1, [r7, #8]
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	220e      	movs	r2, #14
 8000730:	f7ff feda 	bl	80004e8 <CC2500_WriteRegister>
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}

0800073c <CC2500_SetFrequencyLowByte>:

void CC2500_SetFrequencyLowByte(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x0F, data);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	68b9      	ldr	r1, [r7, #8]
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	220f      	movs	r2, #15
 8000754:	f7ff fec8 	bl	80004e8 <CC2500_WriteRegister>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b004      	add	sp, #16
 800075e:	bd80      	pop	{r7, pc}

08000760 <CC2500_SetModemConfiguration4>:

void CC2500_SetModemConfiguration4(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x10, data);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	2210      	movs	r2, #16
 8000778:	f7ff feb6 	bl	80004e8 <CC2500_WriteRegister>
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b004      	add	sp, #16
 8000782:	bd80      	pop	{r7, pc}

08000784 <CC2500_SetModemConfiguration3>:

void CC2500_SetModemConfiguration3(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x11, data);
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	2211      	movs	r2, #17
 800079c:	f7ff fea4 	bl	80004e8 <CC2500_WriteRegister>
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <CC2500_SetModemConfiguration2>:


void CC2500_SetModemConfiguration2(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x12, data);
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	2212      	movs	r2, #18
 80007c0:	f7ff fe92 	bl	80004e8 <CC2500_WriteRegister>
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b004      	add	sp, #16
 80007ca:	bd80      	pop	{r7, pc}

080007cc <CC2500_SetModemConfiguration1>:


void CC2500_SetModemConfiguration1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x13, data);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	2213      	movs	r2, #19
 80007e4:	f7ff fe80 	bl	80004e8 <CC2500_WriteRegister>
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <CC2500_SetModemConfiguration0>:

void CC2500_SetModemConfiguration0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x14, data);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	2214      	movs	r2, #20
 8000808:	f7ff fe6e 	bl	80004e8 <CC2500_WriteRegister>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}

08000814 <CC2500_SetModemDeviationSetting>:

void CC2500_SetModemDeviationSetting(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x15, data);
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	2215      	movs	r2, #21
 800082c:	f7ff fe5c 	bl	80004e8 <CC2500_WriteRegister>
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b004      	add	sp, #16
 8000836:	bd80      	pop	{r7, pc}

08000838 <CC2500_SetFrequencyOffsetConfiguration>:

void CC2500_SetFrequencyOffsetConfiguration(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x19, data);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	2219      	movs	r2, #25
 8000850:	f7ff fe4a 	bl	80004e8 <CC2500_WriteRegister>
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}

0800085c <CC2500_SetBitSynchronizationConfiguration>:

void CC2500_SetBitSynchronizationConfiguration(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x1A, data);
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	221a      	movs	r2, #26
 8000874:	f7ff fe38 	bl	80004e8 <CC2500_WriteRegister>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}

08000880 <CC2500_SetAGCControl2>:

void CC2500_SetAGCControl2(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x1B, data);
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	221b      	movs	r2, #27
 8000898:	f7ff fe26 	bl	80004e8 <CC2500_WriteRegister>
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CC2500_SetAGCControl1>:

void CC2500_SetAGCControl1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x1C, data);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	221c      	movs	r2, #28
 80008bc:	f7ff fe14 	bl	80004e8 <CC2500_WriteRegister>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <CC2500_SetAGCControl0>:

void CC2500_SetAGCControl0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x1D, data);
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	221d      	movs	r2, #29
 80008e0:	f7ff fe02 	bl	80004e8 <CC2500_WriteRegister>
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b004      	add	sp, #16
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CC2500_SetFrontEndRXConfiguration>:

void CC2500_SetFrontEndRXConfiguration(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x21, data);
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	f7ff fdf0 	bl	80004e8 <CC2500_WriteRegister>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b004      	add	sp, #16
 800090e:	bd80      	pop	{r7, pc}

08000910 <CC2500_SetFrontEndTXConfiguration>:

void CC2500_SetFrontEndTXConfiguration(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x22, data);
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	2222      	movs	r2, #34	; 0x22
 8000928:	f7ff fdde 	bl	80004e8 <CC2500_WriteRegister>
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}

08000934 <CC2500_SetFrequencySynthesizerCalibration3>:

void CC2500_SetFrequencySynthesizerCalibration3(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x23, data);
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	2223      	movs	r2, #35	; 0x23
 800094c:	f7ff fdcc 	bl	80004e8 <CC2500_WriteRegister>
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b004      	add	sp, #16
 8000956:	bd80      	pop	{r7, pc}

08000958 <CC2500_SetFrequencySynthesizerCalibration2>:

void CC2500_SetFrequencySynthesizerCalibration2(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x24, data);
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	2224      	movs	r2, #36	; 0x24
 8000970:	f7ff fdba 	bl	80004e8 <CC2500_WriteRegister>
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}

0800097c <CC2500_SetFrequencySynthesizerCalibration1>:

void CC2500_SetFrequencySynthesizerCalibration1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x25, data);
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	68b9      	ldr	r1, [r7, #8]
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	2225      	movs	r2, #37	; 0x25
 8000994:	f7ff fda8 	bl	80004e8 <CC2500_WriteRegister>
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}

080009a0 <CC2500_SetFrequencySynthesizerCalibration0>:

void CC2500_SetFrequencySynthesizerCalibration0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x26, data);
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	2226      	movs	r2, #38	; 0x26
 80009b8:	f7ff fd96 	bl	80004e8 <CC2500_WriteRegister>
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b004      	add	sp, #16
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <CC2500_SetTest2>:

void CC2500_SetTest2(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x2C, data);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	222c      	movs	r2, #44	; 0x2c
 80009dc:	f7ff fd84 	bl	80004e8 <CC2500_WriteRegister>
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <CC2500_SetTest1>:

void CC2500_SetTest1(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x2D, data);
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	222d      	movs	r2, #45	; 0x2d
 8000a00:	f7ff fd72 	bl	80004e8 <CC2500_WriteRegister>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <CC2500_SetTest0>:

void CC2500_SetTest0(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	701a      	strb	r2, [r3, #0]
	CC2500_WriteRegister(hspi, chipSelectPin, 0x2E, data);
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	222e      	movs	r2, #46	; 0x2e
 8000a24:	f7ff fd60 	bl	80004e8 <CC2500_WriteRegister>
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b004      	add	sp, #16
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <CC2500_Reset>:

void CC2500_Reset(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x30);
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fcdb 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <CC2500_EnableRX>:

void CC2500_EnableRX(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x34);
 8000a58:	6839      	ldr	r1, [r7, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2234      	movs	r2, #52	; 0x34
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fccc 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <CC2500_EnableTX>:

void CC2500_EnableTX(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x35);
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2235      	movs	r2, #53	; 0x35
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fcbd 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <CC2500_ExitRXTX>:

void CC2500_ExitRXTX(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x36);
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2236      	movs	r2, #54	; 0x36
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fcae 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <CC2500_FlushRXFIFO>:

void CC2500_FlushRXFIFO(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x3A);
 8000ab2:	6839      	ldr	r1, [r7, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	223a      	movs	r2, #58	; 0x3a
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fc9f 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <CC2500_FlushTXFIFO>:

void CC2500_FlushTXFIFO(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	CC2500_WriteByteSPI(hspi, chipSelectPin, 0x3B);
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	223b      	movs	r2, #59	; 0x3b
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fc90 	bl	80003fc <CC2500_WriteByteSPI>
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <CC2500_GetStatusByteWrite>:

uint8_t CC2500_GetStatusByteWrite(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	return CC2500_WriteByteSPI(hspi, chipSelectPin, 0x3D);
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	223d      	movs	r2, #61	; 0x3d
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fc81 	bl	80003fc <CC2500_WriteByteSPI>
 8000afa:	0003      	movs	r3, r0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <CC2500_GetIsReadyAndIdle>:

bool CC2500_GetIsReadyAndIdle(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	return (CC2500_GetStatusByteWrite(hspi, chipSelectPin) & 0xF0) == 0x00;
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff ffe5 	bl	8000ae4 <CC2500_GetStatusByteWrite>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	23f0      	movs	r3, #240	; 0xf0
 8000b20:	4013      	ands	r3, r2
 8000b22:	425a      	negs	r2, r3
 8000b24:	4153      	adcs	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <CC2500_SetOutputPower>:
{
	return (CC2500_GetStatusByteWrite(hspi, chipSelectPin) & 0xF0) == 0x70;
}

void CC2500_SetOutputPower(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t data)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	701a      	strb	r2, [r3, #0]
	// make sure the counter for the PATABLE index is reset to 0
	HAL_GPIO_WritePin(chipSelectPin->GPIOx, chipSelectPin->GPIO_Pin, GPIO_PIN_SET);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	0019      	movs	r1, r3
 8000b4a:	f001 fe05 	bl	8002758 <HAL_GPIO_WritePin>
	CC2500_WriteRegister(hspi, chipSelectPin, 0x3E, data);
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	223e      	movs	r2, #62	; 0x3e
 8000b58:	f7ff fcc6 	bl	80004e8 <CC2500_WriteRegister>
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <CC2500_GetStatusByteRead>:
	uint8_t paTableIndex0 = CC2500_ReadRegister(hspi, chipSelectPin, 0x3E);
	return paTableIndex0;
}

uint8_t CC2500_GetStatusByteRead(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	return CC2500_WriteByteSPI(hspi, chipSelectPin, 0xBD);
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	22bd      	movs	r2, #189	; 0xbd
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fc41 	bl	80003fc <CC2500_WriteByteSPI>
 8000b7a:	0003      	movs	r3, r0
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <CC2500_GetPacketLength>:
	uint8_t rssi = CC2500_ReadRegister(hspi, chipSelectPin, 0x34);
	return rssi;
}

uint8_t CC2500_GetPacketLength(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	uint8_t packetLength = CC2500_ReadRegister(hspi, chipSelectPin, 0x06);
 8000b8e:	250f      	movs	r5, #15
 8000b90:	197c      	adds	r4, r7, r5
 8000b92:	6839      	ldr	r1, [r7, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2206      	movs	r2, #6
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fc64 	bl	8000466 <CC2500_ReadRegister>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
	return packetLength;
 8000ba2:	197b      	adds	r3, r7, r5
 8000ba4:	781b      	ldrb	r3, [r3, #0]
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}

08000bae <CC2500_GetGDOxStatusAndPacketStatus>:
	uint8_t version = CC2500_ReadRegister(hspi, chipSelectPin, 0x31);
	return version;
}

uint8_t CC2500_GetGDOxStatusAndPacketStatus(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000bae:	b5b0      	push	{r4, r5, r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	uint8_t status = CC2500_ReadRegister(hspi, chipSelectPin, 0x38);
 8000bb8:	250f      	movs	r5, #15
 8000bba:	197c      	adds	r4, r7, r5
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2238      	movs	r2, #56	; 0x38
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fc4f 	bl	8000466 <CC2500_ReadRegister>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
	return status;
 8000bcc:	197b      	adds	r3, r7, r5
 8000bce:	781b      	ldrb	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bdb0      	pop	{r4, r5, r7, pc}

08000bd8 <CC2500_GetNoOfRXBytes>:
	uint8_t status = CC2500_ReadRegister(hspi, chipSelectPin, 0x3B);
	return status;
}

uint8_t CC2500_GetNoOfRXBytes(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	uint8_t status = CC2500_ReadRegister(hspi, chipSelectPin, 0x3B);
 8000be2:	250f      	movs	r5, #15
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	6839      	ldr	r1, [r7, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	223b      	movs	r2, #59	; 0x3b
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fc3a 	bl	8000466 <CC2500_ReadRegister>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]
	return status & 0x7F;
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	227f      	movs	r2, #127	; 0x7f
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b004      	add	sp, #16
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}

08000c08 <CC2500_ReadRXFifo>:
}

uint8_t writeBuffer[100] = {0};
uint8_t readBuffer[100] = {0};
void CC2500_ReadRXFifo(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t* readValues, uint8_t length)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	001a      	movs	r2, r3
 8000c16:	1cfb      	adds	r3, r7, #3
 8000c18:	701a      	strb	r2, [r3, #0]
	writeBuffer[0] = 0xFF; // burst read RX FIFO
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <CC2500_ReadRXFifo+0x80>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
	CC2500_WriteReadBytesSPI(hspi, chipSelectPin, (uint8_t *) writeBuffer, readValues, length + 1);
 8000c20:	1cfb      	adds	r3, r7, #3
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	687c      	ldr	r4, [r7, #4]
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <CC2500_ReadRXFifo+0x80>)
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	0023      	movs	r3, r4
 8000c34:	f7ff fc9d 	bl	8000572 <CC2500_WriteReadBytesSPI>
	for(uint8_t i=0; i < length; i++)
 8000c38:	2317      	movs	r3, #23
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e010      	b.n	8000c64 <CC2500_ReadRXFifo+0x5c>
	{
		readValues[i] = readValues[i+1];
 8000c42:	2017      	movs	r0, #23
 8000c44:	183b      	adds	r3, r7, r0
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	18d2      	adds	r2, r2, r3
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	18cb      	adds	r3, r1, r3
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i < length; i++)
 8000c5a:	183b      	adds	r3, r7, r0
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	183b      	adds	r3, r7, r0
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	2317      	movs	r3, #23
 8000c66:	18fa      	adds	r2, r7, r3
 8000c68:	1cfb      	adds	r3, r7, #3
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3e7      	bcc.n	8000c42 <CC2500_ReadRXFifo+0x3a>
	}
	readValues[length] = 0x00;
 8000c72:	1cfb      	adds	r3, r7, #3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b007      	add	sp, #28
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000003c 	.word	0x2000003c

08000c8c <CC2500_WriteTXFifo>:

void CC2500_WriteTXFifo(SPI_HandleTypeDef* hspi, struct PortAndPin * chipSelectPin, uint8_t* txBytes, uint8_t length)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	1cfb      	adds	r3, r7, #3
 8000c9c:	701a      	strb	r2, [r3, #0]
	txBytes[0] = 0x7F;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	227f      	movs	r2, #127	; 0x7f
 8000ca2:	701a      	strb	r2, [r3, #0]
	CC2500_WriteReadBytesSPI(hspi, chipSelectPin, txBytes, readBuffer, length+1);
 8000ca4:	1cfb      	adds	r3, r7, #3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4c05      	ldr	r4, [pc, #20]	; (8000cc4 <CC2500_WriteTXFifo+0x38>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f7ff fc5b 	bl	8000572 <CC2500_WriteReadBytesSPI>
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b005      	add	sp, #20
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	200000a0 	.word	0x200000a0

08000cc8 <HAL_I2C_SlaveTxCpltCallback>:
__IO uint32_t I2C_Transfer_Complete = 0;

//__IO uint32_t     Transfer_Direction = 0;

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* Toggle LED4: Transfer in transmission process is correct */
	I2C_Transfer_Complete = 1;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
	PunchQueue_pop();
 8000cd6:	f000 f907 	bl	8000ee8 <PunchQueue_pop>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000110 	.word	0x20000110

08000ce8 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	I2C_Transfer_Complete = 1;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_I2C_SlaveRxCpltCallback+0x18>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000110 	.word	0x20000110

08000d04 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	0008      	movs	r0, r1
 8000d0e:	0011      	movs	r1, r2
 8000d10:	1cfb      	adds	r3, r7, #3
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	003b      	movs	r3, r7
 8000d18:	1c0a      	adds	r2, r1, #0
 8000d1a:	801a      	strh	r2, [r3, #0]
	//Transfer_Direction = TransferDirection;
	if (TransferDirection != 0)
 8000d1c:	1cfb      	adds	r3, r7, #3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d019      	beq.n	8000d58 <HAL_I2C_AddrCallback+0x54>
	{
		/*##- Start the transmission process #####################################*/

		if (I2CSlave_receivedRegister[0] == PUNCHREGADDR)
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_I2C_AddrCallback+0x74>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d120      	bne.n	8000d6e <HAL_I2C_AddrCallback+0x6a>
		{
			if (PunchQueue_getNoOfItems() > 0)
 8000d2c:	f000 f84a 	bl	8000dc4 <PunchQueue_getNoOfItems>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d01c      	beq.n	8000d6e <HAL_I2C_AddrCallback+0x6a>
			{
				PunchQueue_pop(I2CSlave_punchToSend);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_I2C_AddrCallback+0x78>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 f8d5 	bl	8000ee8 <PunchQueue_pop>
				if (HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *) I2CSlave_punchToSend, sizeof(struct Punch), I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_I2C_AddrCallback+0x78>)
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	049b      	lsls	r3, r3, #18
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	2221      	movs	r2, #33	; 0x21
 8000d4a:	f001 fde3 	bl	8002914 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d00d      	beq.n	8000d6e <HAL_I2C_AddrCallback+0x6a>
				{
					/* Transfer error in transmission process */
					Error_Handler();
 8000d52:	f000 ff7b 	bl	8001c4c <Error_Handler>
		{
			/* Transfer error in reception process */
			Error_Handler();
		}
	}
}
 8000d56:	e00a      	b.n	8000d6e <HAL_I2C_AddrCallback+0x6a>
		if (HAL_I2C_Slave_Seq_Receive_IT(hi2c, I2CSlave_receivedRegister, 1, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	049b      	lsls	r3, r3, #18
 8000d5c:	4906      	ldr	r1, [pc, #24]	; (8000d78 <HAL_I2C_AddrCallback+0x74>)
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f001 fe97 	bl	8002a94 <HAL_I2C_Slave_Seq_Receive_IT>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_I2C_AddrCallback+0x6a>
			Error_Handler();
 8000d6a:	f000 ff6f 	bl	8001c4c <Error_Handler>
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000108 	.word	0x20000108
 8000d7c:	20000104 	.word	0x20000104

08000d80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	/* restart listening for master requests */
	if(HAL_I2C_EnableListen_IT(hi2c) != HAL_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 ff44 	bl	8002c18 <HAL_I2C_EnableListen_IT>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_I2C_ListenCpltCallback+0x18>
	{
		Error_Handler();
 8000d94:	f000 ff5a 	bl	8001c4c <Error_Handler>
	}
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 fffa 	bl	8002da4 <HAL_I2C_GetError>
 8000db0:	0003      	movs	r3, r0
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d001      	beq.n	8000dba <HAL_I2C_ErrorCallback+0x1a>
  {
    Error_Handler();
 8000db6:	f000 ff49 	bl	8001c4c <Error_Handler>
  }
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <PunchQueue_getNoOfItems>:
int8_t PunchQueue_front = -1, PunchQueue_rear = -1;


// Check if the queue is full
uint8_t PunchQueue_getNoOfItems()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	if (PunchQueue_rear < PunchQueue_front)
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <PunchQueue_getNoOfItems+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	569a      	ldrsb	r2, [r3, r2]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <PunchQueue_getNoOfItems+0x50>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	da0c      	bge.n	8000df2 <PunchQueue_getNoOfItems+0x2e>
	{
		return PUNCHQUEUE_SIZE - (PunchQueue_front - PunchQueue_rear) + 1;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <PunchQueue_getNoOfItems+0x4c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <PunchQueue_getNoOfItems+0x50>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	3307      	adds	r3, #7
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	e00b      	b.n	8000e0a <PunchQueue_getNoOfItems+0x46>
	}
	else
	{
		return PunchQueue_rear - PunchQueue_front + 1;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <PunchQueue_getNoOfItems+0x4c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <PunchQueue_getNoOfItems+0x50>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
	}
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000001 	.word	0x20000001
 8000e14:	20000000 	.word	0x20000000

08000e18 <PunchQueue_isFull>:

// Check if the queue is full
bool PunchQueue_isFull()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	if ((PunchQueue_front == PunchQueue_rear + 1)
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <PunchQueue_isFull+0x38>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	001a      	movs	r2, r3
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <PunchQueue_isFull+0x3c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d009      	beq.n	8000e44 <PunchQueue_isFull+0x2c>
		  ||
		  (PunchQueue_front == 0 && PunchQueue_rear == PUNCHQUEUE_SIZE - 1))
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <PunchQueue_isFull+0x38>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
		  ||
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <PunchQueue_isFull+0x30>
		  (PunchQueue_front == 0 && PunchQueue_rear == PUNCHQUEUE_SIZE - 1))
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <PunchQueue_isFull+0x3c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d101      	bne.n	8000e48 <PunchQueue_isFull+0x30>
	{
		return true;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <PunchQueue_isFull+0x32>
	}
	return false;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000001 	.word	0x20000001

08000e58 <PunchQueue_isEmpty>:

// Check if the queue is empty
bool PunchQueue_isEmpty()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	if (PunchQueue_front == -1)
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <PunchQueue_isEmpty+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	d101      	bne.n	8000e6a <PunchQueue_isEmpty+0x12>
	{
		return true;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <PunchQueue_isEmpty+0x14>
	}
	return false;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000000 	.word	0x20000000

08000e78 <PunchQueue_enQueue>:


bool PunchQueue_enQueue(struct Punch * punch)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	if (PunchQueue_isFull())
 8000e80:	f7ff ffca 	bl	8000e18 <PunchQueue_isFull>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <PunchQueue_enQueue+0x14>
	{
		return false;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e022      	b.n	8000ed2 <PunchQueue_enQueue+0x5a>
	}
	else
	{
		if (PunchQueue_front == -1)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <PunchQueue_enQueue+0x64>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	d102      	bne.n	8000e9c <PunchQueue_enQueue+0x24>
		{
			PunchQueue_front = 0;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <PunchQueue_enQueue+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		}
		PunchQueue_rear = (PunchQueue_rear + 1) % PUNCHQUEUE_SIZE;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <PunchQueue_enQueue+0x68>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	2106      	movs	r1, #6
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff faa2 	bl	80003f0 <__aeabi_idivmod>
 8000eac:	000b      	movs	r3, r1
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <PunchQueue_enQueue+0x68>)
 8000eb2:	701a      	strb	r2, [r3, #0]
		PunchQueue_items[PunchQueue_rear] = *punch;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <PunchQueue_enQueue+0x68>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	0019      	movs	r1, r3
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <PunchQueue_enQueue+0x6c>)
 8000ebe:	000b      	movs	r3, r1
 8000ec0:	015b      	lsls	r3, r3, #5
 8000ec2:	185b      	adds	r3, r3, r1
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	18d3      	adds	r3, r2, r3
 8000ec8:	2221      	movs	r2, #33	; 0x21
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f004 fe68 	bl	8005ba0 <memcpy>
		return true;
 8000ed0:	2301      	movs	r3, #1
	}
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000001 	.word	0x20000001
 8000ee4:	20000114 	.word	0x20000114

08000ee8 <PunchQueue_pop>:
		return true;
	}
}

bool PunchQueue_pop()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	if (PunchQueue_isEmpty())
 8000eec:	f7ff ffb4 	bl	8000e58 <PunchQueue_isEmpty>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <PunchQueue_pop+0x10>
	{
		return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e01b      	b.n	8000f30 <PunchQueue_pop+0x48>
	}
	else
	{
		if (PunchQueue_front == PunchQueue_rear) {
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <PunchQueue_pop+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	569a      	ldrsb	r2, [r3, r2]
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <PunchQueue_pop+0x54>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d106      	bne.n	8000f16 <PunchQueue_pop+0x2e>
			PunchQueue_front = -1;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <PunchQueue_pop+0x50>)
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	701a      	strb	r2, [r3, #0]
			PunchQueue_rear = -1;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <PunchQueue_pop+0x54>)
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e00b      	b.n	8000f2e <PunchQueue_pop+0x46>
		}
		else
		{
			PunchQueue_front = (PunchQueue_front + 1) % PUNCHQUEUE_SIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <PunchQueue_pop+0x50>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	2106      	movs	r1, #6
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff fa65 	bl	80003f0 <__aeabi_idivmod>
 8000f26:	000b      	movs	r3, r1
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <PunchQueue_pop+0x50>)
 8000f2c:	701a      	strb	r2, [r3, #0]
		}
		return true;
 8000f2e:	2301      	movs	r3, #1
	}
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000001 	.word	0x20000001

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f001 f8a6 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f82e 	bl	8000fa8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f9c0 	bl	80012d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f50:	f000 f884 	bl	800105c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f54:	f000 f8c2 	bl	80010dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 f96e 	bl	8001238 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f5c:	f000 f914 	bl	8001188 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f001 f91d 	bl	80021a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	0059      	lsls	r1, r3, #1
 8000f6a:	23a0      	movs	r3, #160	; 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	2201      	movs	r2, #1
 8000f70:	0018      	movs	r0, r3
 8000f72:	f001 fbf1 	bl	8002758 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <main+0x60>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	0019      	movs	r1, r3
 8000f80:	f001 fbea 	bl	8002758 <HAL_GPIO_WritePin>

  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f84:	2007      	movs	r0, #7
 8000f86:	f001 f9f0 	bl	800236a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f001 f9ed 	bl	800236a <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (I2C_Transfer_Complete == 1)
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <main+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d1fb      	bne.n	8000f90 <main+0x50>
		  //if(HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK)
		 // {
			  /* Transfer error in reception process */
		//	  Error_Handler();
		 // }
		  I2C_Transfer_Complete = 0;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <main+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	  if (I2C_Transfer_Complete == 1)
 8000f9e:	e7f7      	b.n	8000f90 <main+0x50>
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	20000110 	.word	0x20000110

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b093      	sub	sp, #76	; 0x4c
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	2414      	movs	r4, #20
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2334      	movs	r3, #52	; 0x34
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f004 fdfa 	bl	8005bb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f004 fdf3 	bl	8005bb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f003 f895 	bl	8004100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	2202      	movs	r2, #2
 8000fda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	0052      	lsls	r2, r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000fe4:	0021      	movs	r1, r4
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2240      	movs	r2, #64	; 0x40
 8000ff0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2208      	movs	r2, #8
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0292      	lsls	r2, r2, #10
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	0592      	lsls	r2, r2, #22
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	187b      	adds	r3, r7, r1
 800101c:	0018      	movs	r0, r3
 800101e:	f003 f8bb 	bl	8004198 <HAL_RCC_OscConfig>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001026:	f000 fe11 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2202      	movs	r2, #2
 8001034:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2102      	movs	r1, #2
 8001046:	0018      	movs	r0, r3
 8001048:	f003 fbb6 	bl	80047b8 <HAL_RCC_ClockConfig>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001050:	f000 fdfc 	bl	8001c4c <Error_Handler>
  }
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b013      	add	sp, #76	; 0x4c
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <MX_I2C2_Init+0x78>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <MX_I2C2_Init+0x7c>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 64;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_I2C2_Init+0x74>)
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001074:	2201      	movs	r2, #1
 8001076:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_I2C2_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C2_Init+0x74>)
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fba5 	bl	80027e8 <HAL_I2C_Init>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010a2:	f000 fdd3 	bl	8001c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C2_Init+0x74>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 ff90 	bl	8003fd0 <HAL_I2CEx_ConfigAnalogFilter>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f000 fdca 	bl	8001c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <MX_I2C2_Init+0x74>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 ffd3 	bl	8004068 <HAL_I2CEx_ConfigDigitalFilter>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fdc1 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200001dc 	.word	0x200001dc
 80010d4:	40005800 	.word	0x40005800
 80010d8:	10707dbc 	.word	0x10707dbc

080010dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_SPI1_Init+0xa4>)
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <MX_SPI1_Init+0xa8>)
 80010e6:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <MX_SPI1_Init+0xa4>)
 80010ea:	2282      	movs	r2, #130	; 0x82
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_SPI1_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_SPI1_Init+0xa4>)
 80010f8:	22e0      	movs	r2, #224	; 0xe0
 80010fa:	00d2      	lsls	r2, r2, #3
 80010fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_SPI1_Init+0xa4>)
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001114:	2218      	movs	r2, #24
 8001116:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_SPI1_Init+0xa4>)
 800112c:	2207      	movs	r2, #7
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001138:	2208      	movs	r2, #8
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_SPI1_Init+0xa4>)
 800113e:	0018      	movs	r0, r3
 8001140:	f003 fce4 	bl	8004b0c <HAL_SPI_Init>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001148:	f000 fd80 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  struct PortAndPin chipSelectPortPin;
  chipSelectPortPin.GPIOx = GPIOA;
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	22a0      	movs	r2, #160	; 0xa0
 8001150:	05d2      	lsls	r2, r2, #23
 8001152:	601a      	str	r2, [r3, #0]
  chipSelectPortPin.GPIO_Pin = GPIO_PIN_8;
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	0052      	lsls	r2, r2, #1
 800115a:	809a      	strh	r2, [r3, #4]
  chipSelectPortPin.InterruptIRQ = EXTI4_15_IRQn;
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2207      	movs	r2, #7
 8001160:	719a      	strb	r2, [r3, #6]

  uint8_t redChannel;
  redChannel = 146;
 8001162:	210f      	movs	r1, #15
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2292      	movs	r2, #146	; 0x92
 8001168:	701a      	strb	r2, [r3, #0]
  InitCC2500(&hspi1, &chipSelectPortPin, redChannel);
 800116a:	187b      	adds	r3, r7, r1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	1d39      	adds	r1, r7, #4
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <MX_SPI1_Init+0xa4>)
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fa20 	bl	80015b8 <InitCC2500>
  /* USER CODE END SPI1_Init 2 */

}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000230 	.word	0x20000230
 8001184:	40013000 	.word	0x40013000

08001188 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_SPI2_Init+0xa4>)
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <MX_SPI2_Init+0xa8>)
 8001192:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_SPI2_Init+0xa4>)
 8001196:	2282      	movs	r2, #130	; 0x82
 8001198:	0052      	lsls	r2, r2, #1
 800119a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_SPI2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_SPI2_Init+0xa4>)
 80011a4:	22e0      	movs	r2, #224	; 0xe0
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_SPI2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_SPI2_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_SPI2_Init+0xa4>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_SPI2_Init+0xa4>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_SPI2_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_SPI2_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI2_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_SPI2_Init+0xa4>)
 80011d8:	2207      	movs	r2, #7
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_SPI2_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI2_Init+0xa4>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_SPI2_Init+0xa4>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 fc8e 	bl	8004b0c <HAL_SPI_Init>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80011f4:	f000 fd2a 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  struct PortAndPin chipSelectPortPin;
  chipSelectPortPin.GPIOx = GPIOB;
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <MX_SPI2_Init+0xac>)
 80011fc:	601a      	str	r2, [r3, #0]
  chipSelectPortPin.GPIO_Pin = GPIO_PIN_9;
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	809a      	strh	r2, [r3, #4]
  chipSelectPortPin.InterruptIRQ = EXTI0_1_IRQn;
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2205      	movs	r2, #5
 800120a:	719a      	strb	r2, [r3, #6]

  uint8_t blueChannel;
  blueChannel = 186;
 800120c:	210f      	movs	r1, #15
 800120e:	187b      	adds	r3, r7, r1
 8001210:	22ba      	movs	r2, #186	; 0xba
 8001212:	701a      	strb	r2, [r3, #0]
  InitCC2500(&hspi2, &chipSelectPortPin, blueChannel);
 8001214:	187b      	adds	r3, r7, r1
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	1d39      	adds	r1, r7, #4
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <MX_SPI2_Init+0xa4>)
 800121c:	0018      	movs	r0, r3
 800121e:	f000 f9cb 	bl	80015b8 <InitCC2500>
  /* USER CODE END SPI2_Init 2 */

}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000294 	.word	0x20000294
 8001230:	40003800 	.word	0x40003800
 8001234:	50000400 	.word	0x50000400

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <MX_USART2_UART_Init+0x90>)
 8001242:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001246:	22e1      	movs	r2, #225	; 0xe1
 8001248:	0252      	lsls	r2, r2, #9
 800124a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001260:	220c      	movs	r2, #12
 8001262:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 8001284:	0018      	movs	r0, r3
 8001286:	f004 f841 	bl	800530c <HAL_UART_Init>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800128e:	f000 fcdd 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  char msg[] = "UART Started 2";
 8001292:	003b      	movs	r3, r7
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <MX_USART2_UART_Init+0x94>)
 8001296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001298:	c313      	stmia	r3!, {r0, r1, r4}
 800129a:	8811      	ldrh	r1, [r2, #0]
 800129c:	8019      	strh	r1, [r3, #0]
 800129e:	7892      	ldrb	r2, [r2, #2]
 80012a0:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80012a2:	003b      	movs	r3, r7
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7fe ff2b 	bl	8000100 <strlen>
 80012aa:	0003      	movs	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	2301      	movs	r3, #1
 80012b0:	425b      	negs	r3, r3
 80012b2:	0039      	movs	r1, r7
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_USART2_UART_Init+0x8c>)
 80012b6:	f004 f87f 	bl	80053b8 <HAL_UART_Transmit>

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b005      	add	sp, #20
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	200002f8 	.word	0x200002f8
 80012c8:	40004400 	.word	0x40004400
 80012cc:	08005bdc 	.word	0x08005bdc

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	240c      	movs	r4, #12
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	0018      	movs	r0, r3
 80012dc:	2314      	movs	r3, #20
 80012de:	001a      	movs	r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	f004 fc66 	bl	8005bb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_GPIO_Init+0x144>)
 80012e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ea:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <MX_GPIO_Init+0x144>)
 80012ec:	2102      	movs	r1, #2
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <MX_GPIO_Init+0x144>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <MX_GPIO_Init+0x144>)
 8001300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <MX_GPIO_Init+0x144>)
 8001304:	2104      	movs	r1, #4
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_GPIO_Init+0x144>)
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_GPIO_Init+0x144>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_GPIO_Init+0x144>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_GPIO_Init+0x144>)
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4839      	ldr	r0, [pc, #228]	; (8001418 <MX_GPIO_Init+0x148>)
 8001334:	2201      	movs	r2, #1
 8001336:	0019      	movs	r1, r3
 8001338:	f001 fa0e 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <MX_GPIO_Init+0x14c>)
 8001342:	2200      	movs	r2, #0
 8001344:	0019      	movs	r1, r3
 8001346:	f001 fa07 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	0059      	lsls	r1, r3, #1
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	2201      	movs	r2, #1
 8001354:	0018      	movs	r0, r3
 8001356:	f001 f9ff 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	2201      	movs	r2, #1
 8001366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	193b      	adds	r3, r7, r4
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	193b      	adds	r3, r7, r4
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <MX_GPIO_Init+0x148>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f001 f888 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001380:	0021      	movs	r1, r4
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	000c      	movs	r4, r1
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2201      	movs	r2, #1
 8001390:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	193b      	adds	r3, r7, r4
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <MX_GPIO_Init+0x14c>)
 80013a2:	0019      	movs	r1, r3
 80013a4:	0010      	movs	r0, r2
 80013a6:	f001 f873 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2212      	movs	r2, #18
 80013ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2284      	movs	r2, #132	; 0x84
 80013b4:	0392      	lsls	r2, r2, #14
 80013b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	193a      	adds	r2, r7, r4
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	0011      	movs	r1, r2
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 f862 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013cc:	0021      	movs	r1, r4
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	0052      	lsls	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2201      	movs	r2, #1
 80013da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	187a      	adds	r2, r7, r1
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f001 f84d 	bl	8002490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2005      	movs	r0, #5
 80013fc:	f000 ffa0 	bl	8002340 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2007      	movs	r0, #7
 8001406:	f000 ff9b 	bl	8002340 <HAL_NVIC_SetPriority>

}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b009      	add	sp, #36	; 0x24
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40021000 	.word	0x40021000
 8001418:	50000400 	.word	0x50000400
 800141c:	50000800 	.word	0x50000800

08001420 <Configure_GDO_INT_1_AsRisingInterrupt>:

/* USER CODE BEGIN 4 */

static void Configure_GDO_INT_1_AsRisingInterrupt()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f004 fbbf 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2210      	movs	r2, #16
 8001438:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2288      	movs	r2, #136	; 0x88
 800143e:	0352      	lsls	r2, r2, #13
 8001440:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	1d3a      	adds	r2, r7, #4
 800144a:	23a0      	movs	r3, #160	; 0xa0
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f001 f81d 	bl	8002490 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2007      	movs	r0, #7
 800145c:	f000 ff70 	bl	8002340 <HAL_NVIC_SetPriority>
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}

08001468 <Configure_GDO_INT_1_AsFallingInterrupt>:

static void Configure_GDO_INT_1_AsFallingInterrupt()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	0018      	movs	r0, r3
 8001472:	2314      	movs	r3, #20
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f004 fb9b 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2210      	movs	r2, #16
 8001480:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2284      	movs	r2, #132	; 0x84
 8001486:	0392      	lsls	r2, r2, #14
 8001488:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	1d3a      	adds	r2, r7, #4
 8001492:	23a0      	movs	r3, #160	; 0xa0
 8001494:	05db      	lsls	r3, r3, #23
 8001496:	0011      	movs	r1, r2
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fff9 	bl	8002490 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2007      	movs	r0, #7
 80014a4:	f000 ff4c 	bl	8002340 <HAL_NVIC_SetPriority>
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Configure_GDO_INT_1_AsGPIO>:

static void Configure_GDO_INT_1_AsGPIO()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	0018      	movs	r0, r3
 80014ba:	2314      	movs	r3, #20
 80014bc:	001a      	movs	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	f004 fb77 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2210      	movs	r2, #16
 80014c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	1d3a      	adds	r2, r7, #4
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	0011      	movs	r1, r2
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 ffd6 	bl	8002490 <HAL_GPIO_Init>
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b006      	add	sp, #24
 80014ea:	bd80      	pop	{r7, pc}

080014ec <Configure_GDO_INT_2_AsRisingInterrupt>:


static void Configure_GDO_INT_2_AsRisingInterrupt()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	0018      	movs	r0, r3
 80014f6:	2314      	movs	r3, #20
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f004 fb59 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2288      	movs	r2, #136	; 0x88
 800150a:	0352      	lsls	r2, r2, #13
 800150c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	1d3a      	adds	r2, r7, #4
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 ffb7 	bl	8002490 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2005      	movs	r0, #5
 8001528:	f000 ff0a 	bl	8002340 <HAL_NVIC_SetPriority>
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}

08001534 <Configure_GDO_INT_2_AsFallingInterrupt>:

static void Configure_GDO_INT_2_AsFallingInterrupt()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	0018      	movs	r0, r3
 800153e:	2314      	movs	r3, #20
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f004 fb35 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2284      	movs	r2, #132	; 0x84
 8001552:	0392      	lsls	r2, r2, #14
 8001554:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	23a0      	movs	r3, #160	; 0xa0
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	0011      	movs	r1, r2
 8001564:	0018      	movs	r0, r3
 8001566:	f000 ff93 	bl	8002490 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2005      	movs	r0, #5
 8001570:	f000 fee6 	bl	8002340 <HAL_NVIC_SetPriority>
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b006      	add	sp, #24
 800157a:	bd80      	pop	{r7, pc}

0800157c <Configure_GDO_INT_2_AsGPIO>:

static void Configure_GDO_INT_2_AsGPIO()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	0018      	movs	r0, r3
 8001586:	2314      	movs	r3, #20
 8001588:	001a      	movs	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	f004 fb11 	bl	8005bb2 <memset>
	/*Configure GPIO pins : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	1d3a      	adds	r2, r7, #4
 80015a4:	23a0      	movs	r3, #160	; 0xa0
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	0011      	movs	r1, r2
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 ff70 	bl	8002490 <HAL_GPIO_Init>
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b006      	add	sp, #24
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <InitCC2500>:


static void InitCC2500(SPI_HandleTypeDef* phspi, struct PortAndPin * chipSelectPortPin, uint8_t channel)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
	CC2500_Reset(phspi, chipSelectPortPin);
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff fa2f 	bl	8000a30 <CC2500_Reset>
	HAL_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 fde4 	bl	80021a0 <HAL_Delay>
	CC2500_Reset(phspi, chipSelectPortPin);
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff fa26 	bl	8000a30 <CC2500_Reset>
	HAL_Delay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 fddb 	bl	80021a0 <HAL_Delay>
	uint8_t writelength;
	writelength = 0x40;  // was 0x29=41
 80015ea:	2516      	movs	r5, #22
 80015ec:	197b      	adds	r3, r7, r5
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	701a      	strb	r2, [r3, #0]
	CC2500_SetPacketLength(phspi, chipSelectPortPin, writelength);
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7fe fffc 	bl	80005f8 <CC2500_SetPacketLength>
	uint8_t readlength;
	readlength = CC2500_GetPacketLength(phspi, chipSelectPortPin);
 8001600:	2615      	movs	r6, #21
 8001602:	19bc      	adds	r4, r7, r6
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff faba 	bl	8000b84 <CC2500_GetPacketLength>
 8001610:	0003      	movs	r3, r0
 8001612:	7023      	strb	r3, [r4, #0]
	if ( readlength != writelength ) {
 8001614:	19ba      	adds	r2, r7, r6
 8001616:	197b      	adds	r3, r7, r5
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <InitCC2500+0x6c>
		Error_Handler();
 8001620:	f000 fb14 	bl	8001c4c <Error_Handler>
	}


	CC2500_SetGDO0OutputPinConfiguration(phspi, chipSelectPortPin, GDOx_CFG_ASSERT_SYNC_WORD);
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2206      	movs	r2, #6
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe ffd2 	bl	80005d4 <CC2500_SetGDO0OutputPinConfiguration>
	//CC2500_SetGDO2OutputPinConfiguration(phspi, chipSelectPortPin, GDOx_CFG_PA_PD);

	// Switch to RX after sending packet, Stay in RX after receiving packet, Keep CCA_MODE default
	CC2500_SetMainRadioControlStateMachineConfiguration1(phspi, chipSelectPortPin, MCSM1_CCA_MODE_DEFAULT |	MCSM1_RXOFF_MODE_STAY_IN_RX | MCSM1_TXOFF_MODE_RX );
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	223f      	movs	r2, #63	; 0x3f
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff f802 	bl	8000640 <CC2500_SetMainRadioControlStateMachineConfiguration1>

	CC2500_SetMainRadioControlStateMachineConfiguration0(phspi, chipSelectPortPin, MCSM0_FS_AUTOCAL_WHEN_GOING_TO_RX_TX_FROM_IDLE | MCSM0_PO_TIMEOUT_EXPIRE_COUNT_64);
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2218      	movs	r2, #24
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff f80e 	bl	8000664 <CC2500_SetMainRadioControlStateMachineConfiguration0>

	// Whitening OFF, normal packet format, CRC Enabled, Variable packet length mode. First byte after sync word.
	CC2500_SetPacketAutomationControl(phspi, chipSelectPortPin, PKTCTRL0_CRC_EN | PKTCTRL0_VARIABLE_PACKET_LENGTH);
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2205      	movs	r2, #5
 800164e:	0018      	movs	r0, r3
 8001650:	f7fe ffe4 	bl	800061c <CC2500_SetPacketAutomationControl>

	CC2500_SetOutputPower(phspi, chipSelectPortPin, PATABLE_0DBM);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	22fe      	movs	r2, #254	; 0xfe
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fa68 	bl	8000b30 <CC2500_SetOutputPower>

	// 178 kHz
	CC2500_SetFrequencySynthesizerControl1(phspi, chipSelectPortPin, 0x07);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2207      	movs	r2, #7
 8001666:	0018      	movs	r0, r3
 8001668:	f7ff f820 	bl	80006ac <CC2500_SetFrequencySynthesizerControl1>
	// offset = 0
	CC2500_SetFrequencySynthesizerControl0(phspi, chipSelectPortPin, 0x00);
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff f82c 	bl	80006d0 <CC2500_SetFrequencySynthesizerControl0>

	// frequency 2424999878 :  multiply with 2^16 and divide by 26MHz to get frequency to set
	// dec 6112492 = hex 5d44ec
	CC2500_SetFrequencyHighByte(phspi, chipSelectPortPin, 0x5D);
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	225d      	movs	r2, #93	; 0x5d
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff f838 	bl	80006f4 <CC2500_SetFrequencyHighByte>
	CC2500_SetFrequencyMiddleByte(phspi, chipSelectPortPin, 0x44);
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2244      	movs	r2, #68	; 0x44
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff f844 	bl	8000718 <CC2500_SetFrequencyMiddleByte>
	CC2500_SetFrequencyLowByte(phspi, chipSelectPortPin, 0xEC);
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	22ec      	movs	r2, #236	; 0xec
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff f850 	bl	800073c <CC2500_SetFrequencyLowByte>

	CC2500_SetModemConfiguration4(phspi, chipSelectPortPin, MDMCFG4_CHANBW_66kHz | MDMCFG4_DRATE_E_13_66kHz);
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	222d      	movs	r2, #45	; 0x2d
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff f85c 	bl	8000760 <CC2500_SetModemConfiguration4>
	CC2500_SetModemConfiguration3(phspi, chipSelectPortPin, MDMCFG3_DRATE_M_125Baud);
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	223b      	movs	r2, #59	; 0x3b
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff f868 	bl	8000784 <CC2500_SetModemConfiguration3>
	CC2500_SetModemConfiguration2(phspi, chipSelectPortPin, MDMCFG2_MOD_FORMAT_MSK | MDMCFG2_SYNC_MODE_30_32);
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2273      	movs	r2, #115	; 0x73
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff f874 	bl	80007a8 <CC2500_SetModemConfiguration2>
	// CHANSPC_E = 3 and CHANSPC_M = 59 => Channel spacing = 249.9 kHz
	CC2500_SetModemConfiguration1(phspi, chipSelectPortPin, MDMCFG1_NUM_PREAMBLE_4 | MDMCFG1_CHANSPC_E_249_9kHz);
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2223      	movs	r2, #35	; 0x23
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff f880 	bl	80007cc <CC2500_SetModemConfiguration1>
	CC2500_SetModemConfiguration0(phspi, chipSelectPortPin, MDMCFG0_CHANSPC_M_249_9kHz);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	223b      	movs	r2, #59	; 0x3b
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff f88c 	bl	80007f0 <CC2500_SetModemConfiguration0>

	CC2500_SetModemDeviationSetting(phspi, chipSelectPortPin, DEVIATN_DEVIATION_E_MSK_1_785kHz | DEVIATN_DEVIATION_M_MSK_1_785kHz);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff f898 	bl	8000814 <CC2500_SetModemDeviationSetting>
	CC2500_SetFrequencyOffsetConfiguration(phspi, chipSelectPortPin, FOCCFG_FOC_PRE_K_4K | FOCCFG_FOC_POST_K_Kdiv2 | FOCCFG_FOC_POST_FOC_LIMIT_BWdiv8);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	221d      	movs	r2, #29
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff f8a4 	bl	8000838 <CC2500_SetFrequencyOffsetConfiguration>

	CC2500_SetBitSynchronizationConfiguration(phspi, chipSelectPortPin, BSCFG_BS_PRE_KI_0Kl | BSCFG_BS_PRE_KP_2Kp | BSCFG_BS_POST_KI_KlDiv2 | BSCFG_BS_POST_KP_KP);
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	221c      	movs	r2, #28
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff f8b0 	bl	800085c <CC2500_SetBitSynchronizationConfiguration>

	CC2500_SetAGCControl2(phspi, chipSelectPortPin, AGCCTRL2_MAX_DVGA_GAIN | AGCCTRL2_MAGN_TARGET_42);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	22c7      	movs	r2, #199	; 0xc7
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff f8bc 	bl	8000880 <CC2500_SetAGCControl2>
	CC2500_SetAGCControl1(phspi, chipSelectPortPin, AGCCTRL1_AGC_LNA_PRIORITY_0);
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff f8c8 	bl	80008a4 <CC2500_SetAGCControl1>
	CC2500_SetAGCControl0(phspi, chipSelectPortPin, AGCCTRL0_HYST_LEVEL_MEDIUM | AGCCTRL0_WAIT_TIME_32);
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22b0      	movs	r2, #176	; 0xb0
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff f8d4 	bl	80008c8 <CC2500_SetAGCControl0>

	CC2500_SetFrontEndRXConfiguration(phspi, chipSelectPortPin, FREND1_LNA_CURRENT_2 | FREND1_LNA2MIX_CURRENT_3 | FREND1_LODIV_BUF_CURRENT_RX_1 | FREND1_MIX_CURRENT_2);
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22b6      	movs	r2, #182	; 0xb6
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff f8e0 	bl	80008ec <CC2500_SetFrontEndRXConfiguration>
	CC2500_SetFrontEndTXConfiguration(phspi, chipSelectPortPin, FREND0_LODIV_BUF_CURRENT_TX_1);
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2210      	movs	r2, #16
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff f8ec 	bl	8000910 <CC2500_SetFrontEndTXConfiguration>

	CC2500_SetFrequencySynthesizerCalibration3(phspi, chipSelectPortPin, FSCAL3_FSCAL3_HIGH_3 | FSCAL3_CHP_CURR_CAL_EN | FSCAL3_FSCAL3_LOW_A);
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	22ea      	movs	r2, #234	; 0xea
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff f8f8 	bl	8000934 <CC2500_SetFrequencySynthesizerCalibration3>
	CC2500_SetFrequencySynthesizerCalibration2(phspi, chipSelectPortPin, FSCAL2_FSCAL2_DEFAULT);
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	220a      	movs	r2, #10
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff f904 	bl	8000958 <CC2500_SetFrequencySynthesizerCalibration2>
	CC2500_SetFrequencySynthesizerCalibration1(phspi, chipSelectPortPin, FSCAL1_FSCAL1_0);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff f910 	bl	800097c <CC2500_SetFrequencySynthesizerCalibration1>
	CC2500_SetFrequencySynthesizerCalibration0(phspi, chipSelectPortPin, FSCAL0_FSCAL0_17);
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2211      	movs	r2, #17
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff f91c 	bl	80009a0 <CC2500_SetFrequencySynthesizerCalibration0>

	CC2500_SetTest2(phspi, chipSelectPortPin, TEST2_136);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2288      	movs	r2, #136	; 0x88
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff f928 	bl	80009c4 <CC2500_SetTest2>
	CC2500_SetTest1(phspi, chipSelectPortPin, TEST1_49);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2231      	movs	r2, #49	; 0x31
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff f934 	bl	80009e8 <CC2500_SetTest1>
	CC2500_SetTest0(phspi, chipSelectPortPin, TEST0_HIGH_2 | TEST0_VCO_SEL_CAL_EN | TEST0_LOW_1);
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	220b      	movs	r2, #11
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff f940 	bl	8000a0c <CC2500_SetTest0>

	CC2500_ExitRXTX(phspi, chipSelectPortPin);
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0011      	movs	r1, r2
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff f979 	bl	8000a8a <CC2500_ExitRXTX>
	uint8_t status;
	status = CC2500_GetStatusByteRead(phspi, chipSelectPortPin);  // Read instead??
 8001798:	2514      	movs	r5, #20
 800179a:	197c      	adds	r4, r7, r5
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff f9de 	bl	8000b64 <CC2500_GetStatusByteRead>
 80017a8:	0003      	movs	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
	if ((status & 0x0F) > 0) {
 80017ac:	197b      	adds	r3, r7, r5
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	220f      	movs	r2, #15
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd05      	ble.n	80017c4 <InitCC2500+0x20c>
		CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	0011      	movs	r1, r2
 80017be:	0018      	movs	r0, r3
 80017c0:	f7ff f972 	bl	8000aa8 <CC2500_FlushRXFIFO>
//	status = CC2500_GetStatusByteWrite(phspi, chipSelectPortPin);
//	if ((status & 0x0F) > 0) {
//		CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
//	}

	CC2500_SetChannelNumber(phspi, chipSelectPortPin, channel);
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7fe ff5b 	bl	8000688 <CC2500_SetChannelNumber>
	CC2500_SetOutputPower(phspi, chipSelectPortPin, PATABLE_0DBM);
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	22fe      	movs	r2, #254	; 0xfe
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff f9a9 	bl	8000b30 <CC2500_SetOutputPower>
	CC2500_EnableRX(phspi, chipSelectPortPin);
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f932 	bl	8000a4e <CC2500_EnableRX>

	// wait for CARRIER SENSE
	uint8_t pktstatus;
	uint8_t noOfTries = 0;
 80017ea:	2317      	movs	r3, #23
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	while(((pktstatus = CC2500_GetGDOxStatusAndPacketStatus(phspi, chipSelectPortPin)) & 0x40) > 0)
 80017f2:	e00b      	b.n	800180c <InitCC2500+0x254>
	{
		noOfTries++;
 80017f4:	2117      	movs	r1, #23
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	3201      	adds	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
		if (noOfTries > 200) {
 8001800:	187b      	adds	r3, r7, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2bc8      	cmp	r3, #200	; 0xc8
 8001806:	d901      	bls.n	800180c <InitCC2500+0x254>
			Error_Handler();
 8001808:	f000 fa20 	bl	8001c4c <Error_Handler>
	while(((pktstatus = CC2500_GetGDOxStatusAndPacketStatus(phspi, chipSelectPortPin)) & 0x40) > 0)
 800180c:	2513      	movs	r5, #19
 800180e:	197c      	adds	r4, r7, r5
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff f9c9 	bl	8000bae <CC2500_GetGDOxStatusAndPacketStatus>
 800181c:	0003      	movs	r3, r0
 800181e:	7023      	strb	r3, [r4, #0]
 8001820:	197b      	adds	r3, r7, r5
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	dce3      	bgt.n	80017f4 <InitCC2500+0x23c>
		}
	}

	CC2500_ExitRXTX(phspi, chipSelectPortPin);
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff f929 	bl	8000a8a <CC2500_ExitRXTX>
	status = CC2500_GetStatusByteWrite(phspi, chipSelectPortPin);
 8001838:	2514      	movs	r5, #20
 800183a:	197c      	adds	r4, r7, r5
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff f94e 	bl	8000ae4 <CC2500_GetStatusByteWrite>
 8001848:	0003      	movs	r3, r0
 800184a:	7023      	strb	r3, [r4, #0]
	if ((status & 0x0F) > 0) {
 800184c:	197b      	adds	r3, r7, r5
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	220f      	movs	r2, #15
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd05      	ble.n	8001864 <InitCC2500+0x2ac>
		CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff f922 	bl	8000aa8 <CC2500_FlushRXFIFO>
	}

	CC2500_SetGDO0OutputPinConfiguration(phspi, chipSelectPortPin, GDOx_CFG_ASSERT_SYNC_WORD);
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2206      	movs	r2, #6
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe feb2 	bl	80005d4 <CC2500_SetGDO0OutputPinConfiguration>
//	CC2500_ExitRXTX(phspi, chipSelectPortPin);
//	status = CC2500_GetStatusByteWrite(phspi, chipSelectPortPin);
//	if ((status & 0x0F) > 0) {
//		CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
//	}
	CC2500_EnableRX(phspi, chipSelectPortPin);
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0011      	movs	r1, r2
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff f8e9 	bl	8000a4e <CC2500_EnableRX>
			sprintf(msg, format, value);
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		}
	}*/

}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b007      	add	sp, #28
 8001882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001884 <GetPunchReplyIncludingSpaceForCommandByte>:

uint8_t PunchReplySequenceNo = 1;
uint8_t PunchReply[] = {0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x23, 0x00, 0x73, 0x60};
static uint8_t GetPunchReplyIncludingSpaceForCommandByte(struct Punch punch, uint8_t * punchReply)
{
 8001884:	b084      	sub	sp, #16
 8001886:	b5b0      	push	{r4, r5, r7, lr}
 8001888:	af00      	add	r7, sp, #0
 800188a:	250c      	movs	r5, #12
 800188c:	1d2c      	adds	r4, r5, #4
 800188e:	19e4      	adds	r4, r4, r7
 8001890:	6020      	str	r0, [r4, #0]
 8001892:	6061      	str	r1, [r4, #4]
 8001894:	60a2      	str	r2, [r4, #8]
 8001896:	60e3      	str	r3, [r4, #12]
	punchReply[2] = punch.payload[4]; 	// station serialno
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	1c9a      	adds	r2, r3, #2
 800189c:	0029      	movs	r1, r5
 800189e:	1d0b      	adds	r3, r1, #4
 80018a0:	19db      	adds	r3, r3, r7
 80018a2:	795b      	ldrb	r3, [r3, #5]
 80018a4:	7013      	strb	r3, [r2, #0]
	punchReply[3] = punch.payload[5]; 	// station serialno
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	1cda      	adds	r2, r3, #3
 80018aa:	1d0b      	adds	r3, r1, #4
 80018ac:	19db      	adds	r3, r3, r7
 80018ae:	799b      	ldrb	r3, [r3, #6]
 80018b0:	7013      	strb	r3, [r2, #0]
	punchReply[4] = punch.payload[6]; 	// station serialno
 80018b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b4:	1d1a      	adds	r2, r3, #4
 80018b6:	1d0b      	adds	r3, r1, #4
 80018b8:	19db      	adds	r3, r3, r7
 80018ba:	79db      	ldrb	r3, [r3, #7]
 80018bc:	7013      	strb	r3, [r2, #0]
	punchReply[5] = punch.payload[7]; 	// station serialno
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	1d5a      	adds	r2, r3, #5
 80018c2:	1d0b      	adds	r3, r1, #4
 80018c4:	19db      	adds	r3, r3, r7
 80018c6:	7a1b      	ldrb	r3, [r3, #8]
 80018c8:	7013      	strb	r3, [r2, #0]
	punchReply[6] = I2CSlave_serialNumber[0];
 80018ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018cc:	3306      	adds	r3, #6
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <GetPunchReplyIncludingSpaceForCommandByte+0x94>)
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	701a      	strb	r2, [r3, #0]
	punchReply[7] = I2CSlave_serialNumber[1];
 80018d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d6:	3307      	adds	r3, #7
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <GetPunchReplyIncludingSpaceForCommandByte+0x94>)
 80018da:	7852      	ldrb	r2, [r2, #1]
 80018dc:	701a      	strb	r2, [r3, #0]
	punchReply[8] = I2CSlave_serialNumber[2];
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	3308      	adds	r3, #8
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <GetPunchReplyIncludingSpaceForCommandByte+0x94>)
 80018e4:	7892      	ldrb	r2, [r2, #2]
 80018e6:	701a      	strb	r2, [r3, #0]
	punchReply[9] = I2CSlave_serialNumber[3];
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	3309      	adds	r3, #9
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <GetPunchReplyIncludingSpaceForCommandByte+0x94>)
 80018ee:	78d2      	ldrb	r2, [r2, #3]
 80018f0:	701a      	strb	r2, [r3, #0]
	punchReply[12] = PunchReplySequenceNo;
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	330c      	adds	r3, #12
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <GetPunchReplyIncludingSpaceForCommandByte+0x98>)
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	701a      	strb	r2, [r3, #0]
	PunchReplySequenceNo++;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <GetPunchReplyIncludingSpaceForCommandByte+0x98>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <GetPunchReplyIncludingSpaceForCommandByte+0x98>)
 8001906:	701a      	strb	r2, [r3, #0]
	return 15;
 8001908:	230f      	movs	r3, #15
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bcb0      	pop	{r4, r5, r7}
 8001910:	bc08      	pop	{r3}
 8001912:	b004      	add	sp, #16
 8001914:	4718      	bx	r3
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	2000010c 	.word	0x2000010c
 800191c:	20000002 	.word	0x20000002

08001920 <ReadMessage>:

struct Punch punch;
static void ReadMessage(SPI_HandleTypeDef* phspi, struct PortAndPin * chipSelectPortPin)
{
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	46c6      	mov	lr, r8
 8001924:	b500      	push	{lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af06      	add	r7, sp, #24
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	uint8_t noOfRxBytes1 = 0;
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	uint8_t noOfRxBytes2 = 0;
 8001936:	230e      	movs	r3, #14
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	do {
		noOfRxBytes1 = CC2500_GetNoOfRXBytes(phspi, chipSelectPortPin);
 800193e:	250f      	movs	r5, #15
 8001940:	197c      	adds	r4, r7, r5
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff f945 	bl	8000bd8 <CC2500_GetNoOfRXBytes>
 800194e:	0003      	movs	r3, r0
 8001950:	7023      	strb	r3, [r4, #0]
		if (noOfRxBytes1 == 0) {
 8001952:	197b      	adds	r3, r7, r5
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <ReadMessage+0x3c>
 800195a:	e0b9      	b.n	8001ad0 <ReadMessage+0x1b0>
			return;
		}
		noOfRxBytes2 = CC2500_GetNoOfRXBytes(phspi, chipSelectPortPin);
 800195c:	260e      	movs	r6, #14
 800195e:	19bc      	adds	r4, r7, r6
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0011      	movs	r1, r2
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff f936 	bl	8000bd8 <CC2500_GetNoOfRXBytes>
 800196c:	0003      	movs	r3, r0
 800196e:	7023      	strb	r3, [r4, #0]
	} while (noOfRxBytes1 != noOfRxBytes2);
 8001970:	197a      	adds	r2, r7, r5
 8001972:	0034      	movs	r4, r6
 8001974:	193b      	adds	r3, r7, r4
 8001976:	7812      	ldrb	r2, [r2, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d1df      	bne.n	800193e <ReadMessage+0x1e>

	// read the length byte
	CC2500_ReadRXFifo(phspi, chipSelectPortPin, &punch.payloadLength, 1);
 800197e:	4a57      	ldr	r2, [pc, #348]	; (8001adc <ReadMessage+0x1bc>)
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	2301      	movs	r3, #1
 8001986:	f7ff f93f 	bl	8000c08 <CC2500_ReadRXFifo>

	if (noOfRxBytes2 >= punch.payloadLength + 3)
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <ReadMessage+0x1bc>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	1c9a      	adds	r2, r3, #2
 8001990:	193b      	adds	r3, r7, r4
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	da17      	bge.n	80019c8 <ReadMessage+0xa8>
	{
		CC2500_ReadRXFifo(phspi, chipSelectPortPin, punch.payload, punch.payloadLength);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <ReadMessage+0x1bc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4a50      	ldr	r2, [pc, #320]	; (8001ae0 <ReadMessage+0x1c0>)
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f931 	bl	8000c08 <CC2500_ReadRXFifo>
		CC2500_ReadRXFifo(phspi, chipSelectPortPin, (uint8_t *)&punch.messageStatus, 2);
 80019a6:	4a4f      	ldr	r2, [pc, #316]	; (8001ae4 <ReadMessage+0x1c4>)
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	f7ff f92b 	bl	8000c08 <CC2500_ReadRXFifo>
		// todo check CRC and dont reply if wrong
		PunchQueue_enQueue(&punch);
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <ReadMessage+0x1bc>)
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff fa5f 	bl	8000e78 <PunchQueue_enQueue>
		CC2500_EnableRX(phspi, chipSelectPortPin);
		return;
	}

	// Wait 337 us (SRR-OEM)
	CC2500_ExitRXTX(phspi, chipSelectPortPin);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff f862 	bl	8000a8a <CC2500_ExitRXTX>
 80019c6:	e012      	b.n	80019ee <ReadMessage+0xce>
		CC2500_ExitRXTX(phspi, chipSelectPortPin);
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff f85b 	bl	8000a8a <CC2500_ExitRXTX>
		CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff f864 	bl	8000aa8 <CC2500_FlushRXFIFO>
		CC2500_EnableRX(phspi, chipSelectPortPin);
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff f831 	bl	8000a4e <CC2500_EnableRX>
		return;
 80019ec:	e071      	b.n	8001ad2 <ReadMessage+0x1b2>
	do {
	} while (!CC2500_GetIsReadyAndIdle(phspi, chipSelectPortPin));  // while not chip ready and IDLE
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0011      	movs	r1, r2
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff f885 	bl	8000b04 <CC2500_GetIsReadyAndIdle>
 80019fa:	0003      	movs	r3, r0
 80019fc:	001a      	movs	r2, r3
 80019fe:	2301      	movs	r3, #1
 8001a00:	4053      	eors	r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f2      	bne.n	80019ee <ReadMessage+0xce>
	CC2500_FlushRXFIFO(phspi, chipSelectPortPin);
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7ff f84a 	bl	8000aa8 <CC2500_FlushRXFIFO>


	uint8_t replyLength = GetPunchReplyIncludingSpaceForCommandByte(punch, PunchReply);
 8001a14:	250d      	movs	r5, #13
 8001a16:	46a8      	mov	r8, r5
 8001a18:	44b8      	add	r8, r7
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <ReadMessage+0x1bc>)
 8001a1c:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <ReadMessage+0x1c8>)
 8001a1e:	9205      	str	r2, [sp, #20]
 8001a20:	466a      	mov	r2, sp
 8001a22:	0011      	movs	r1, r2
 8001a24:	001a      	movs	r2, r3
 8001a26:	3210      	adds	r2, #16
 8001a28:	ca51      	ldmia	r2!, {r0, r4, r6}
 8001a2a:	c151      	stmia	r1!, {r0, r4, r6}
 8001a2c:	6810      	ldr	r0, [r2, #0]
 8001a2e:	6008      	str	r0, [r1, #0]
 8001a30:	7912      	ldrb	r2, [r2, #4]
 8001a32:	710a      	strb	r2, [r1, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f7ff ff22 	bl	8001884 <GetPunchReplyIncludingSpaceForCommandByte>
 8001a40:	0003      	movs	r3, r0
 8001a42:	4642      	mov	r2, r8
 8001a44:	7013      	strb	r3, [r2, #0]
	CC2500_WriteTXFifo(phspi, chipSelectPortPin, PunchReply, replyLength);  // we are a bit slow to get writing
 8001a46:	197b      	adds	r3, r7, r5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <ReadMessage+0x1c8>)
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f91c 	bl	8000c8c <CC2500_WriteTXFifo>

	// Disable interrupt, change GDO0 to PA_PD

	if (chipSelectPortPin->GPIO_Pin == GPIO_PIN_8) {
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	889a      	ldrh	r2, [r3, #4]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d102      	bne.n	8001a66 <ReadMessage+0x146>
		Configure_GDO_INT_1_AsGPIO();
 8001a60:	f7ff fd26 	bl	80014b0 <Configure_GDO_INT_1_AsGPIO>
 8001a64:	e001      	b.n	8001a6a <ReadMessage+0x14a>
	} else {
		Configure_GDO_INT_2_AsGPIO();
 8001a66:	f7ff fd89 	bl	800157c <Configure_GDO_INT_2_AsGPIO>
	}
	CC2500_SetGDO0OutputPinConfiguration(phspi, chipSelectPortPin, GDOx_CFG_PA_PD);
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	221b      	movs	r2, #27
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7fe fdaf 	bl	80005d4 <CC2500_SetGDO0OutputPinConfiguration>

	CC2500_EnableRX(phspi, chipSelectPortPin);
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe ffe6 	bl	8000a4e <CC2500_EnableRX>

	uint8_t packetStatus;
	do {
		//for(int i=0;i<2000;i++); // add a abit of delay here?
		packetStatus = CC2500_GetGDOxStatusAndPacketStatus(phspi, chipSelectPortPin);
 8001a82:	250c      	movs	r5, #12
 8001a84:	197c      	adds	r4, r7, r5
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff f88e 	bl	8000bae <CC2500_GetGDOxStatusAndPacketStatus>
 8001a92:	0003      	movs	r3, r0
 8001a94:	7023      	strb	r3, [r4, #0]
	} while (!(packetStatus & 0x10)); // wait for channel clear
 8001a96:	197b      	adds	r3, r7, r5
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0f0      	beq.n	8001a82 <ReadMessage+0x162>

	// Enable rising interrupts for CC2500-GDO0
	if (chipSelectPortPin->GPIO_Pin == GPIO_PIN_8) {
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	889a      	ldrh	r2, [r3, #4]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d102      	bne.n	8001ab2 <ReadMessage+0x192>
		Configure_GDO_INT_1_AsRisingInterrupt();
 8001aac:	f7ff fcb8 	bl	8001420 <Configure_GDO_INT_1_AsRisingInterrupt>
 8001ab0:	e001      	b.n	8001ab6 <ReadMessage+0x196>
	} else {
		Configure_GDO_INT_2_AsRisingInterrupt();
 8001ab2:	f7ff fd1b 	bl	80014ec <Configure_GDO_INT_2_AsRisingInterrupt>
	}
	HAL_NVIC_EnableIRQ(chipSelectPortPin->InterruptIRQ);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 fc54 	bl	800236a <HAL_NVIC_EnableIRQ>

	CC2500_EnableTX(phspi, chipSelectPortPin);
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7fe ffcf 	bl	8000a6c <CC2500_EnableTX>
 8001ace:	e000      	b.n	8001ad2 <ReadMessage+0x1b2>
			return;
 8001ad0:	46c0      	nop			; (mov r8, r8)
}
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	46b8      	mov	r8, r7
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	2000038c 	.word	0x2000038c
 8001ae0:	2000038d 	.word	0x2000038d
 8001ae4:	200003ab 	.word	0x200003ab
 8001ae8:	20000004 	.word	0x20000004

08001aec <AckSentEnableRX>:

static void AckSentEnableRX(SPI_HandleTypeDef* phspi, struct PortAndPin * chipSelectPortPin)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	// must be in idle, but is probably in RX now...
	CC2500_FlushTXFIFO(phspi, chipSelectPortPin);
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7fe ffe2 	bl	8000ac6 <CC2500_FlushTXFIFO>
	if (chipSelectPortPin->GPIO_Pin == GPIO_PIN_8) {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	889a      	ldrh	r2, [r3, #4]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d102      	bne.n	8001b14 <AckSentEnableRX+0x28>
		Configure_GDO_INT_1_AsGPIO();
 8001b0e:	f7ff fccf 	bl	80014b0 <Configure_GDO_INT_1_AsGPIO>
 8001b12:	e001      	b.n	8001b18 <AckSentEnableRX+0x2c>
	} else {
		Configure_GDO_INT_2_AsGPIO();
 8001b14:	f7ff fd32 	bl	800157c <Configure_GDO_INT_2_AsGPIO>
	}
	CC2500_SetGDO0OutputPinConfiguration(phspi, chipSelectPortPin, GDOx_CFG_ASSERT_SYNC_WORD);
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2206      	movs	r2, #6
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7fe fd58 	bl	80005d4 <CC2500_SetGDO0OutputPinConfiguration>
	//Configure_GDO0 as falling interrupt
	if (chipSelectPortPin->GPIO_Pin == GPIO_PIN_8) {
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	889a      	ldrh	r2, [r3, #4]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d102      	bne.n	8001b36 <AckSentEnableRX+0x4a>
		Configure_GDO_INT_1_AsFallingInterrupt();
 8001b30:	f7ff fc9a 	bl	8001468 <Configure_GDO_INT_1_AsFallingInterrupt>
 8001b34:	e001      	b.n	8001b3a <AckSentEnableRX+0x4e>

	} else {
		Configure_GDO_INT_2_AsFallingInterrupt();
 8001b36:	f7ff fcfd 	bl	8001534 <Configure_GDO_INT_2_AsFallingInterrupt>
	}
	HAL_NVIC_EnableIRQ(chipSelectPortPin->InterruptIRQ);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	799b      	ldrb	r3, [r3, #6]
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 fc12 	bl	800236a <HAL_NVIC_EnableIRQ>
	CC2500_EnableRX(phspi, chipSelectPortPin);
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7fe ff7e 	bl	8000a4e <CC2500_EnableRX>
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	0002      	movs	r2, r0
 8001b64:	1dbb      	adds	r3, r7, #6
 8001b66:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_4) // PA4 - first CC2500
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d112      	bne.n	8001b96 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
    {
    	struct PortAndPin chipSelectPortPin;
    	chipSelectPortPin.GPIOx = GPIOA;
 8001b70:	2110      	movs	r1, #16
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	22a0      	movs	r2, #160	; 0xa0
 8001b76:	05d2      	lsls	r2, r2, #23
 8001b78:	601a      	str	r2, [r3, #0]
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_8;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	0052      	lsls	r2, r2, #1
 8001b80:	809a      	strh	r2, [r3, #4]
    	chipSelectPortPin.InterruptIRQ = EXTI4_15_IRQn;
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2207      	movs	r2, #7
 8001b86:	719a      	strb	r2, [r3, #6]

   		ReadMessage(&hspi1, &chipSelectPortPin);
 8001b88:	187a      	adds	r2, r7, r1
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff fec6 	bl	8001920 <ReadMessage>
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_9;
    	chipSelectPortPin.InterruptIRQ = EXTI0_1_IRQn;

		ReadMessage(&hspi2, &chipSelectPortPin);
	}
}
 8001b94:	e014      	b.n	8001bc0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
    else if(GPIO_Pin == GPIO_PIN_1) // PA1 - second CC2500
 8001b96:	1dbb      	adds	r3, r7, #6
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d110      	bne.n	8001bc0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
    	chipSelectPortPin.GPIOx = GPIOB;
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8001ba4:	601a      	str	r2, [r3, #0]
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_9;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	809a      	strh	r2, [r3, #4]
    	chipSelectPortPin.InterruptIRQ = EXTI0_1_IRQn;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	719a      	strb	r2, [r3, #6]
		ReadMessage(&hspi2, &chipSelectPortPin);
 8001bb4:	187a      	adds	r2, r7, r1
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8001bb8:	0011      	movs	r1, r2
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff feb0 	bl	8001920 <ReadMessage>
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b006      	add	sp, #24
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000230 	.word	0x20000230
 8001bcc:	50000400 	.word	0x50000400
 8001bd0:	20000294 	.word	0x20000294

08001bd4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	0002      	movs	r2, r0
 8001bdc:	1dbb      	adds	r3, r7, #6
 8001bde:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_4) // PA4 - first CC2500
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d112      	bne.n	8001c0e <HAL_GPIO_EXTI_Rising_Callback+0x3a>
    {
    	struct PortAndPin chipSelectPortPin;
    	chipSelectPortPin.GPIOx = GPIOA;
 8001be8:	2110      	movs	r1, #16
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	22a0      	movs	r2, #160	; 0xa0
 8001bee:	05d2      	lsls	r2, r2, #23
 8001bf0:	601a      	str	r2, [r3, #0]
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_8;
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	809a      	strh	r2, [r3, #4]
    	chipSelectPortPin.InterruptIRQ = EXTI4_15_IRQn;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	719a      	strb	r2, [r3, #6]

    	AckSentEnableRX(&hspi1, &chipSelectPortPin);
 8001c00:	187a      	adds	r2, r7, r1
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff ff70 	bl	8001aec <AckSentEnableRX>
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_9;
    	chipSelectPortPin.InterruptIRQ = EXTI0_1_IRQn;

    	AckSentEnableRX(&hspi2, &chipSelectPortPin);
	}
}
 8001c0c:	e014      	b.n	8001c38 <HAL_GPIO_EXTI_Rising_Callback+0x64>
    else if(GPIO_Pin == GPIO_PIN_1) // PA1 - second CC2500
 8001c0e:	1dbb      	adds	r3, r7, #6
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d110      	bne.n	8001c38 <HAL_GPIO_EXTI_Rising_Callback+0x64>
    	chipSelectPortPin.GPIOx = GPIOB;
 8001c16:	2108      	movs	r1, #8
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8001c1c:	601a      	str	r2, [r3, #0]
    	chipSelectPortPin.GPIO_Pin = GPIO_PIN_9;
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	809a      	strh	r2, [r3, #4]
    	chipSelectPortPin.InterruptIRQ = EXTI0_1_IRQn;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2205      	movs	r2, #5
 8001c2a:	719a      	strb	r2, [r3, #6]
    	AckSentEnableRX(&hspi2, &chipSelectPortPin);
 8001c2c:	187a      	adds	r2, r7, r1
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 8001c30:	0011      	movs	r1, r2
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff ff5a 	bl	8001aec <AckSentEnableRX>
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b006      	add	sp, #24
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000230 	.word	0x20000230
 8001c44:	50000400 	.word	0x50000400
 8001c48:	20000294 	.word	0x20000294

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c52:	b672      	cpsid	i
}
 8001c54:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	// set a pin to high?
	char msg[] = "Error Handler";
 8001c56:	003b      	movs	r3, r7
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <Error_Handler+0x60>)
 8001c5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c5c:	c313      	stmia	r3!, {r0, r1, r4}
 8001c5e:	8812      	ldrh	r2, [r2, #0]
 8001c60:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001c62:	003b      	movs	r3, r7
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe fa4b 	bl	8000100 <strlen>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	425b      	negs	r3, r3
 8001c72:	0039      	movs	r1, r7
 8001c74:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <Error_Handler+0x64>)
 8001c76:	f003 fb9f 	bl	80053b8 <HAL_UART_Transmit>
	while (1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <Error_Handler+0x68>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	0019      	movs	r1, r3
 8001c84:	f000 fd68 	bl	8002758 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c88:	23fa      	movs	r3, #250	; 0xfa
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 fa87 	bl	80021a0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <Error_Handler+0x68>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	f000 fd5c 	bl	8002758 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001ca0:	23fa      	movs	r3, #250	; 0xfa
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fa7b 	bl	80021a0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001caa:	e7e6      	b.n	8001c7a <Error_Handler+0x2e>
 8001cac:	08005bec 	.word	0x08005bec
 8001cb0:	200002f8 	.word	0x200002f8
 8001cb4:	50000800 	.word	0x50000800

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x44>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x44>)
 8001cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_MspInit+0x44>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0549      	lsls	r1, r1, #21
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_MspInit+0x44>)
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	4013      	ands	r3, r2
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	2414      	movs	r4, #20
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	2314      	movs	r3, #20
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f003 ff4d 	bl	8005bb2 <memset>
  if(hi2c->Instance==I2C2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_I2C_MspInit+0xa0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d139      	bne.n	8001d96 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	22c0      	movs	r2, #192	; 0xc0
 8001d3e:	0152      	lsls	r2, r2, #5
 8001d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	0021      	movs	r1, r4
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2212      	movs	r2, #18
 8001d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2206      	movs	r2, #6
 8001d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	187a      	adds	r2, r7, r1
 8001d5e:	23a0      	movs	r3, #160	; 0xa0
 8001d60:	05db      	lsls	r3, r3, #23
 8001d62:	0011      	movs	r1, r2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 fb93 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	03c9      	lsls	r1, r1, #15
 8001d74:	430a      	orrs	r2, r1
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_I2C_MspInit+0xa4>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	03db      	lsls	r3, r3, #15
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2018      	movs	r0, #24
 8001d8c:	f000 fad8 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001d90:	2018      	movs	r0, #24
 8001d92:	f000 faea 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b00b      	add	sp, #44	; 0x2c
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40005800 	.word	0x40005800
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b08d      	sub	sp, #52	; 0x34
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	241c      	movs	r4, #28
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	0018      	movs	r0, r3
 8001db6:	2314      	movs	r3, #20
 8001db8:	001a      	movs	r2, r3
 8001dba:	2100      	movs	r1, #0
 8001dbc:	f003 fef9 	bl	8005bb2 <memset>
  if(hspi->Instance==SPI1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_SPI_MspInit+0x168>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d131      	bne.n	8001e2e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0149      	lsls	r1, r1, #5
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dfe:	0021      	movs	r1, r4
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	22e0      	movs	r2, #224	; 0xe0
 8001e04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2202      	movs	r2, #2
 8001e0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	187a      	adds	r2, r7, r1
 8001e20:	23a0      	movs	r3, #160	; 0xa0
 8001e22:	05db      	lsls	r3, r3, #23
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fb32 	bl	8002490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2c:	e06c      	b.n	8001f08 <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a39      	ldr	r2, [pc, #228]	; (8001f18 <HAL_SPI_MspInit+0x170>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d167      	bne.n	8001f08 <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	01c9      	lsls	r1, r1, #7
 8001e42:	430a      	orrs	r2, r1
 8001e44:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	01db      	lsls	r3, r3, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e84:	241c      	movs	r4, #28
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	2202      	movs	r2, #2
 8001e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001e9e:	193b      	adds	r3, r7, r4
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_SPI_MspInit+0x174>)
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	f000 faf0 	bl	8002490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb0:	193b      	adds	r3, r7, r4
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	2202      	movs	r2, #2
 8001eba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	193a      	adds	r2, r7, r4
 8001ed0:	23a0      	movs	r3, #160	; 0xa0
 8001ed2:	05db      	lsls	r3, r3, #23
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fada 	bl	8002490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001edc:	0021      	movs	r1, r4
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2204      	movs	r2, #4
 8001efa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_SPI_MspInit+0x174>)
 8001f00:	0019      	movs	r1, r3
 8001f02:	0010      	movs	r0, r2
 8001f04:	f000 fac4 	bl	8002490 <HAL_GPIO_Init>
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b00d      	add	sp, #52	; 0x34
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	40013000 	.word	0x40013000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40003800 	.word	0x40003800
 8001f1c:	50000400 	.word	0x50000400

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	2414      	movs	r4, #20
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	2314      	movs	r3, #20
 8001f30:	001a      	movs	r2, r3
 8001f32:	2100      	movs	r1, #0
 8001f34:	f003 fe3d 	bl	8005bb2 <memset>
  if(huart->Instance==USART2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_UART_MspInit+0x8c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d130      	bne.n	8001fa4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0289      	lsls	r1, r1, #10
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f76:	0021      	movs	r1, r4
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2202      	movs	r2, #2
 8001f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2201      	movs	r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	187a      	adds	r2, r7, r1
 8001f98:	23a0      	movs	r3, #160	; 0xa0
 8001f9a:	05db      	lsls	r3, r3, #23
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 fa76 	bl	8002490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b00b      	add	sp, #44	; 0x2c
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	40004400 	.word	0x40004400
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f000 f8c6 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f000 fbd4 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ff6:	2010      	movs	r0, #16
 8001ff8:	f000 fbcc 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <I2C2_IRQHandler+0x2c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	23e0      	movs	r3, #224	; 0xe0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4013      	ands	r3, r2
 8002014:	d004      	beq.n	8002020 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <I2C2_IRQHandler+0x2c>)
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fe39 	bl	8002c90 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800201e:	e003      	b.n	8002028 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <I2C2_IRQHandler+0x2c>)
 8002022:	0018      	movs	r0, r3
 8002024:	f000 fe1a 	bl	8002c5c <HAL_I2C_EV_IRQHandler>
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	200001dc 	.word	0x200001dc

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002042:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002044:	f7ff fff6 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	; (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800206e:	f003 fd73 	bl	8005b58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002072:	f7fe ff65 	bl	8000f40 <main>

08002076 <LoopForever>:

LoopForever:
  b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   r0, =_estack
 8002078:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002084:	08005c7c 	.word	0x08005c7c
  ldr r2, =_sbss
 8002088:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800208c:	200003b4 	.word	0x200003b4

08002090 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_IRQHandler>
	...

08002094 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x3c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_Init+0x3c>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	0049      	lsls	r1, r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ae:	2003      	movs	r0, #3
 80020b0:	f000 f810 	bl	80020d4 <HAL_InitTick>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e001      	b.n	80020c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fdfa 	bl	8001cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_InitTick+0x88>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02b      	beq.n	8002144 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_InitTick+0x8c>)
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_InitTick+0x88>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	0019      	movs	r1, r3
 80020f6:	23fa      	movs	r3, #250	; 0xfa
 80020f8:	0098      	lsls	r0, r3, #2
 80020fa:	f7fe f809 	bl	8000110 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	0019      	movs	r1, r3
 8002102:	0020      	movs	r0, r4
 8002104:	f7fe f804 	bl	8000110 <__udivsi3>
 8002108:	0003      	movs	r3, r0
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f93d 	bl	800238a <HAL_SYSTICK_Config>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d112      	bne.n	800213a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d80a      	bhi.n	8002130 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	2200      	movs	r2, #0
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f90c 	bl	8002340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_InitTick+0x90>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e00d      	b.n	800214c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e008      	b.n	800214c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e003      	b.n	800214c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b005      	add	sp, #20
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	2000001c 	.word	0x2000001c
 8002160:	20000014 	.word	0x20000014
 8002164:	20000018 	.word	0x20000018

08002168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x1c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x20>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	18d2      	adds	r2, r2, r3
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_IncTick+0x20>)
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	2000001c 	.word	0x2000001c
 8002188:	200003b0 	.word	0x200003b0

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	200003b0 	.word	0x200003b0

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fff0 	bl	800218c <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_Delay+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	001a      	movs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	f7ff ffe0 	bl	800218c <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	2000001c 	.word	0x2000001c

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b7f      	cmp	r3, #127	; 0x7f
 80021fa:	d809      	bhi.n	8002210 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	231f      	movs	r3, #31
 8002204:	401a      	ands	r2, r3
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_EnableIRQ+0x30>)
 8002208:	2101      	movs	r1, #1
 800220a:	4091      	lsls	r1, r2
 800220c:	000a      	movs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	d828      	bhi.n	8002284 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002232:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <__NVIC_SetPriority+0xd4>)
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	33c0      	adds	r3, #192	; 0xc0
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	589b      	ldr	r3, [r3, r2]
 8002242:	1dfa      	adds	r2, r7, #7
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	0011      	movs	r1, r2
 8002248:	2203      	movs	r2, #3
 800224a:	400a      	ands	r2, r1
 800224c:	00d2      	lsls	r2, r2, #3
 800224e:	21ff      	movs	r1, #255	; 0xff
 8002250:	4091      	lsls	r1, r2
 8002252:	000a      	movs	r2, r1
 8002254:	43d2      	mvns	r2, r2
 8002256:	401a      	ands	r2, r3
 8002258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	401a      	ands	r2, r3
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	0018      	movs	r0, r3
 8002268:	2303      	movs	r3, #3
 800226a:	4003      	ands	r3, r0
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002270:	481f      	ldr	r0, [pc, #124]	; (80022f0 <__NVIC_SetPriority+0xd4>)
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b25b      	sxtb	r3, r3
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	430a      	orrs	r2, r1
 800227c:	33c0      	adds	r3, #192	; 0xc0
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002282:	e031      	b.n	80022e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <__NVIC_SetPriority+0xd8>)
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	0019      	movs	r1, r3
 800228c:	230f      	movs	r3, #15
 800228e:	400b      	ands	r3, r1
 8002290:	3b08      	subs	r3, #8
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3306      	adds	r3, #6
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	3304      	adds	r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1dfa      	adds	r2, r7, #7
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	0011      	movs	r1, r2
 80022a4:	2203      	movs	r2, #3
 80022a6:	400a      	ands	r2, r1
 80022a8:	00d2      	lsls	r2, r2, #3
 80022aa:	21ff      	movs	r1, #255	; 0xff
 80022ac:	4091      	lsls	r1, r2
 80022ae:	000a      	movs	r2, r1
 80022b0:	43d2      	mvns	r2, r2
 80022b2:	401a      	ands	r2, r3
 80022b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	401a      	ands	r2, r3
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	0018      	movs	r0, r3
 80022c4:	2303      	movs	r3, #3
 80022c6:	4003      	ands	r3, r0
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022cc:	4809      	ldr	r0, [pc, #36]	; (80022f4 <__NVIC_SetPriority+0xd8>)
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	001c      	movs	r4, r3
 80022d4:	230f      	movs	r3, #15
 80022d6:	4023      	ands	r3, r4
 80022d8:	3b08      	subs	r3, #8
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	430a      	orrs	r2, r1
 80022de:	3306      	adds	r3, #6
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	18c3      	adds	r3, r0, r3
 80022e4:	3304      	adds	r3, #4
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b003      	add	sp, #12
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	429a      	cmp	r2, r3
 800230a:	d301      	bcc.n	8002310 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230c:	2301      	movs	r3, #1
 800230e:	e010      	b.n	8002332 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <SysTick_Config+0x44>)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	3a01      	subs	r2, #1
 8002316:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002318:	2301      	movs	r3, #1
 800231a:	425b      	negs	r3, r3
 800231c:	2103      	movs	r1, #3
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff ff7c 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x44>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x44>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	210f      	movs	r1, #15
 800234c:	187b      	adds	r3, r7, r1
 800234e:	1c02      	adds	r2, r0, #0
 8002350:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	187b      	adds	r3, r7, r1
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	b25b      	sxtb	r3, r3
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	0002      	movs	r2, r0
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b25b      	sxtb	r3, r3
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff ff33 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ffaf 	bl	80022f8 <SysTick_Config>
 800239a:	0003      	movs	r3, r0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	210f      	movs	r1, #15
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2225      	movs	r2, #37	; 0x25
 80023b8:	5c9b      	ldrb	r3, [r3, r2]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d006      	beq.n	80023ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e049      	b.n	8002462 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	210e      	movs	r1, #14
 80023da:	438a      	bics	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	438a      	bics	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	491d      	ldr	r1, [pc, #116]	; (8002470 <HAL_DMA_Abort_IT+0xcc>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_DMA_Abort_IT+0xd0>)
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	221c      	movs	r2, #28
 8002408:	4013      	ands	r3, r2
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_DMA_Abort_IT+0xd0>)
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800241c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	490f      	ldr	r1, [pc, #60]	; (8002470 <HAL_DMA_Abort_IT+0xcc>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800243e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2225      	movs	r2, #37	; 0x25
 8002444:	2101      	movs	r1, #1
 8002446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	; 0x24
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0010      	movs	r0, r2
 8002460:	4798      	blx	r3
    }
  }
  return status;
 8002462:	230f      	movs	r3, #15
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	fffffeff 	.word	0xfffffeff
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2225      	movs	r2, #37	; 0x25
 8002484:	5c9b      	ldrb	r3, [r3, r2]
 8002486:	b2db      	uxtb	r3, r3
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e147      	b.n	8002730 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4091      	lsls	r1, r2
 80024aa:	000a      	movs	r2, r1
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_GPIO_Init+0x28>
 80024b6:	e138      	b.n	800272a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2203      	movs	r2, #3
 80024be:	4013      	ands	r3, r2
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d005      	beq.n	80024d0 <HAL_GPIO_Init+0x40>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	409a      	lsls	r2, r3
 80024f2:	0013      	movs	r3, r2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	43da      	mvns	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	2201      	movs	r2, #1
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2203      	movs	r2, #3
 8002538:	4013      	ands	r3, r2
 800253a:	2b03      	cmp	r3, #3
 800253c:	d017      	beq.n	800256e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2203      	movs	r2, #3
 8002574:	4013      	ands	r3, r2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d123      	bne.n	80025c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	58d3      	ldr	r3, [r2, r3]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2107      	movs	r1, #7
 80025a6:	400b      	ands	r3, r1
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	6939      	ldr	r1, [r7, #16]
 80025c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	43da      	mvns	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	401a      	ands	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	23c0      	movs	r3, #192	; 0xc0
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d100      	bne.n	8002604 <HAL_GPIO_Init+0x174>
 8002602:	e092      	b.n	800272a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002604:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3318      	adds	r3, #24
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	589b      	ldr	r3, [r3, r2]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2203      	movs	r2, #3
 8002616:	4013      	ands	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	220f      	movs	r2, #15
 800261c:	409a      	lsls	r2, r3
 800261e:	0013      	movs	r3, r2
 8002620:	43da      	mvns	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	23a0      	movs	r3, #160	; 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	429a      	cmp	r2, r3
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x1ca>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_GPIO_Init+0x2bc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x1c6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a44      	ldr	r2, [pc, #272]	; (8002750 <HAL_GPIO_Init+0x2c0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x1c2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a43      	ldr	r2, [pc, #268]	; (8002754 <HAL_GPIO_Init+0x2c4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x1be>
 800264a:	2303      	movs	r3, #3
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x1cc>
 800264e:	2305      	movs	r3, #5
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x1cc>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x1cc>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x1cc>
 800265a:	2300      	movs	r3, #0
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	2103      	movs	r1, #3
 8002660:	400a      	ands	r2, r1
 8002662:	00d2      	lsls	r2, r2, #3
 8002664:	4093      	lsls	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800266c:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3318      	adds	r3, #24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43da      	mvns	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	035b      	lsls	r3, r3, #13
 8002692:	4013      	ands	r3, r2
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43da      	mvns	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	039b      	lsls	r3, r3, #14
 80026bc:	4013      	ands	r3, r2
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026d0:	2384      	movs	r3, #132	; 0x84
 80026d2:	58d3      	ldr	r3, [r2, r3]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43da      	mvns	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f4:	4914      	ldr	r1, [pc, #80]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026f6:	2284      	movs	r2, #132	; 0x84
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43da      	mvns	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	4013      	ands	r3, r2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002722:	4909      	ldr	r1, [pc, #36]	; (8002748 <HAL_GPIO_Init+0x2b8>)
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	40da      	lsrs	r2, r3
 8002738:	1e13      	subs	r3, r2, #0
 800273a:	d000      	beq.n	800273e <HAL_GPIO_Init+0x2ae>
 800273c:	e6b0      	b.n	80024a0 <HAL_GPIO_Init+0x10>
  }
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b006      	add	sp, #24
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021800 	.word	0x40021800
 800274c:	50000400 	.word	0x50000400
 8002750:	50000800 	.word	0x50000800
 8002754:	50000c00 	.word	0x50000c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	0008      	movs	r0, r1
 8002762:	0011      	movs	r1, r2
 8002764:	1cbb      	adds	r3, r7, #2
 8002766:	1c02      	adds	r2, r0, #0
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	1c7b      	adds	r3, r7, #1
 800276c:	1c0a      	adds	r2, r1, #0
 800276e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002770:	1c7b      	adds	r3, r7, #1
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002778:	1cbb      	adds	r3, r7, #2
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002782:	1cbb      	adds	r3, r7, #2
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	0002      	movs	r2, r0
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	1dba      	adds	r2, r7, #6
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	4013      	ands	r3, r2
 80027aa:	d008      	beq.n	80027be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027ae:	1dba      	adds	r2, r7, #6
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fa0b 	bl	8001bd4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	4013      	ands	r3, r2
 80027c8:	d008      	beq.n	80027dc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027cc:	1dba      	adds	r2, r7, #6
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff f9c0 	bl	8001b5c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021800 	.word	0x40021800

080027e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e082      	b.n	8002900 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2241      	movs	r2, #65	; 0x41
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fa75 	bl	8001d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2241      	movs	r2, #65	; 0x41
 800281a:	2124      	movs	r1, #36	; 0x24
 800281c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	438a      	bics	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_I2C_Init+0x120>)
 8002838:	400a      	ands	r2, r1
 800283a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4931      	ldr	r1, [pc, #196]	; (800290c <HAL_I2C_Init+0x124>)
 8002848:	400a      	ands	r2, r1
 800284a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0209      	lsls	r1, r1, #8
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e007      	b.n	8002876 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2184      	movs	r1, #132	; 0x84
 8002870:	0209      	lsls	r1, r1, #8
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d104      	bne.n	8002888 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	491f      	ldr	r1, [pc, #124]	; (8002910 <HAL_I2C_Init+0x128>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	491a      	ldr	r1, [pc, #104]	; (800290c <HAL_I2C_Init+0x124>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69d9      	ldr	r1, [r3, #28]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1a      	ldr	r2, [r3, #32]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2120      	movs	r1, #32
 80028ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2242      	movs	r2, #66	; 0x42
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}
 8002908:	f0ffffff 	.word	0xf0ffffff
 800290c:	ffff7fff 	.word	0xffff7fff
 8002910:	02008000 	.word	0x02008000

08002914 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	1dbb      	adds	r3, r7, #6
 8002922:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	001a      	movs	r2, r3
 800292e:	2328      	movs	r3, #40	; 0x28
 8002930:	4013      	ands	r3, r2
 8002932:	2b28      	cmp	r3, #40	; 0x28
 8002934:	d000      	beq.n	8002938 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8002936:	e09f      	b.n	8002a78 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800293e:	1dbb      	adds	r3, r7, #6
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e093      	b.n	8002a7a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002952:	4a4c      	ldr	r2, [pc, #304]	; (8002a84 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f001 fad5 	bl	8003f08 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8002968:	2302      	movs	r3, #2
 800296a:	e086      	b.n	8002a7a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	2101      	movs	r1, #1
 8002972:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2241      	movs	r2, #65	; 0x41
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b2a      	cmp	r3, #42	; 0x2a
 800297e:	d12c      	bne.n	80029da <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2102      	movs	r1, #2
 8002984:	0018      	movs	r0, r3
 8002986:	f001 fabf 	bl	8003f08 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	401a      	ands	r2, r3
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	429a      	cmp	r2, r3
 800299c:	d11d      	bne.n	80029da <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4937      	ldr	r1, [pc, #220]	; (8002a88 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80029aa:	400a      	ands	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d011      	beq.n	80029da <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff fcee 	bl	80023a4 <HAL_DMA_Abort_IT>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d006      	beq.n	80029da <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	0018      	movs	r0, r3
 80029d8:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2241      	movs	r2, #65	; 0x41
 80029de:	2129      	movs	r1, #41	; 0x29
 80029e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2242      	movs	r2, #66	; 0x42
 80029e6:	2120      	movs	r1, #32
 80029e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4923      	ldr	r1, [pc, #140]	; (8002a88 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1dba      	adds	r2, r7, #6
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	3b08      	subs	r3, #8
 8002a30:	425a      	negs	r2, r3
 8002a32:	4153      	adcs	r3, r2
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	2117      	movs	r1, #23
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f001 f9da 	bl	8003e28 <I2C_Enable_IRQ>

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
  }
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b006      	add	sp, #24
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	00008001 	.word	0x00008001
 8002a88:	ffff7fff 	.word	0xffff7fff
 8002a8c:	08003d77 	.word	0x08003d77
 8002a90:	08002db9 	.word	0x08002db9

08002a94 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	1dbb      	adds	r3, r7, #6
 8002aa2:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2241      	movs	r2, #65	; 0x41
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	001a      	movs	r2, r3
 8002aae:	2328      	movs	r3, #40	; 0x28
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b28      	cmp	r3, #40	; 0x28
 8002ab4:	d000      	beq.n	8002ab8 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 8002ab6:	e09f      	b.n	8002bf8 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 8002abe:	1dbb      	adds	r3, r7, #6
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e093      	b.n	8002bfa <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f001 fa15 	bl	8003f08 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e086      	b.n	8002bfa <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	; 0x40
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2241      	movs	r2, #65	; 0x41
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b29      	cmp	r3, #41	; 0x29
 8002afe:	d12c      	bne.n	8002b5a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2101      	movs	r1, #1
 8002b04:	0018      	movs	r0, r3
 8002b06:	f001 f9ff 	bl	8003f08 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	01db      	lsls	r3, r3, #7
 8002b14:	401a      	ands	r2, r3
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	01db      	lsls	r3, r3, #7
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11d      	bne.n	8002b5a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fc2e 	bl	80023a4 <HAL_DMA_Abort_IT>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	0018      	movs	r0, r3
 8002b58:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	212a      	movs	r1, #42	; 0x2a
 8002b60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2242      	movs	r2, #66	; 0x42
 8002b66:	2120      	movs	r1, #32
 8002b68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1dba      	adds	r2, r7, #6
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 8002ba2:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2208      	movs	r2, #8
 8002bac:	4013      	ands	r3, r2
 8002bae:	3b08      	subs	r3, #8
 8002bb0:	425a      	negs	r2, r3
 8002bb2:	4153      	adcs	r3, r2
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	2117      	movs	r1, #23
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f001 f91a 	bl	8003e28 <I2C_Enable_IRQ>

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
  }
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b006      	add	sp, #24
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	00008002 	.word	0x00008002
 8002c08:	ffffbfff 	.word	0xffffbfff
 8002c0c:	08003d77 	.word	0x08003d77
 8002c10:	ffff7fff 	.word	0xffff7fff
 8002c14:	08002db9 	.word	0x08002db9

08002c18 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2241      	movs	r2, #65	; 0x41
 8002c24:	5c9b      	ldrb	r3, [r3, r2]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d10f      	bne.n	8002c4c <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2241      	movs	r2, #65	; 0x41
 8002c30:	2128      	movs	r1, #40	; 0x28
 8002c32:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_I2C_EnableListen_IT+0x40>)
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	021a      	lsls	r2, r3, #8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f001 f8f0 	bl	8003e28 <I2C_Enable_IRQ>

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	08002db9 	.word	0x08002db9

08002c5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
  }
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	001a      	movs	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d010      	beq.n	8002cd6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	09db      	lsrs	r3, r3, #7
 8002cb8:	001a      	movs	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	0052      	lsls	r2, r2, #1
 8002cd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	0a9b      	lsrs	r3, r3, #10
 8002cda:	001a      	movs	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d010      	beq.n	8002d04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	09db      	lsrs	r3, r3, #7
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cec:	d00a      	beq.n	8002d04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	00d2      	lsls	r2, r2, #3
 8002d02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	0a5b      	lsrs	r3, r3, #9
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d010      	beq.n	8002d32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	09db      	lsrs	r3, r3, #7
 8002d14:	001a      	movs	r2, r3
 8002d16:	2301      	movs	r3, #1
 8002d18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d1a:	d00a      	beq.n	8002d32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	2202      	movs	r2, #2
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	220b      	movs	r2, #11
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d005      	beq.n	8002d4c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 fee8 	bl	8003b1c <I2C_ITError>
  }
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <I2C_Slave_ISR_IT+0x24>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0fa      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x21a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	001a      	movs	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	001a      	movs	r2, r3
 8002df6:	2301      	movs	r3, #1
 8002df8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dfa:	d005      	beq.n	8002e08 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0011      	movs	r1, r2
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fd0c 	bl	8003820 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d054      	beq.n	8002ebe <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	001a      	movs	r2, r3
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e1e:	d04e      	beq.n	8002ebe <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d12d      	bne.n	8002e86 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2241      	movs	r2, #65	; 0x41
 8002e2e:	5c9b      	ldrb	r3, [r3, r2]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b28      	cmp	r3, #40	; 0x28
 8002e34:	d10b      	bne.n	8002e4e <I2C_Slave_ISR_IT+0x96>
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	049b      	lsls	r3, r3, #18
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fe0e 	bl	8003a68 <I2C_ITListenCplt>
 8002e4c:	e036      	b.n	8002ebc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2241      	movs	r2, #65	; 0x41
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b29      	cmp	r3, #41	; 0x29
 8002e58:	d110      	bne.n	8002e7c <I2C_Slave_ISR_IT+0xc4>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4a5f      	ldr	r2, [pc, #380]	; (8002fdc <I2C_Slave_ISR_IT+0x224>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00c      	beq.n	8002e7c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2210      	movs	r2, #16
 8002e68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 ff60 	bl	8003d32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 fb9b 	bl	80035b0 <I2C_ITSlaveSeqCplt>
 8002e7a:	e01f      	b.n	8002ebc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2210      	movs	r2, #16
 8002e82:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e84:	e09d      	b.n	8002fc2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	2204      	movs	r2, #4
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <I2C_Slave_ISR_IT+0xf4>
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	045b      	lsls	r3, r3, #17
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d000      	beq.n	8002eac <I2C_Slave_ISR_IT+0xf4>
 8002eaa:	e08a      	b.n	8002fc2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fe31 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002eba:	e082      	b.n	8002fc2 <I2C_Slave_ISR_IT+0x20a>
 8002ebc:	e081      	b.n	8002fc2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	001a      	movs	r2, r3
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ed4:	d02b      	beq.n	8002f2e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d018      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d154      	bne.n	8002fc6 <I2C_Slave_ISR_IT+0x20e>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <I2C_Slave_ISR_IT+0x224>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d050      	beq.n	8002fc6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fb42 	bl	80035b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f2c:	e04b      	b.n	8002fc6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	08db      	lsrs	r3, r3, #3
 8002f32:	001a      	movs	r2, r3
 8002f34:	2301      	movs	r3, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	d00c      	beq.n	8002f54 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	001a      	movs	r2, r3
 8002f40:	2301      	movs	r3, #1
 8002f42:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f44:	d006      	beq.n	8002f54 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fa49 	bl	80033e4 <I2C_ITAddrCplt>
 8002f52:	e039      	b.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d033      	beq.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	001a      	movs	r2, r3
 8002f66:	2301      	movs	r3, #1
 8002f68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f6a:	d02d      	beq.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d018      	beq.n	8002fa8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fa6:	e00f      	b.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	045b      	lsls	r3, r3, #17
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d002      	beq.n	8002fb8 <I2C_Slave_ISR_IT+0x200>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 faf8 	bl	80035b0 <I2C_ITSlaveSeqCplt>
 8002fc0:	e002      	b.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	e000      	b.n	8002fc8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002fc6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b006      	add	sp, #24
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <I2C_Master_ISR_DMA+0x1a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0f7      	b.n	80031ea <I2C_Master_ISR_DMA+0x20a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	001a      	movs	r2, r3
 8003008:	2301      	movs	r3, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d019      	beq.n	8003042 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	001a      	movs	r2, r3
 8003014:	2301      	movs	r3, #1
 8003016:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003018:	d013      	beq.n	8003042 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	2204      	movs	r2, #4
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2120      	movs	r1, #32
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fef8 	bl	8003e28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fe79 	bl	8003d32 <I2C_Flush_TXDR>
 8003040:	e0ce      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	09db      	lsrs	r3, r3, #7
 8003046:	001a      	movs	r2, r3
 8003048:	2301      	movs	r3, #1
 800304a:	4013      	ands	r3, r2
 800304c:	d100      	bne.n	8003050 <I2C_Master_ISR_DMA+0x70>
 800304e:	e07e      	b.n	800314e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	001a      	movs	r2, r3
 8003056:	2301      	movs	r3, #1
 8003058:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800305a:	d100      	bne.n	800305e <I2C_Master_ISR_DMA+0x7e>
 800305c:	e077      	b.n	800314e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	438a      	bics	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d055      	beq.n	8003124 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	b29a      	uxth	r2, r3
 8003080:	2312      	movs	r3, #18
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	0592      	lsls	r2, r2, #22
 8003086:	0d92      	lsrs	r2, r2, #22
 8003088:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2bff      	cmp	r3, #255	; 0xff
 8003092:	d906      	bls.n	80030a2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	045b      	lsls	r3, r3, #17
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e010      	b.n	80030c4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a50      	ldr	r2, [pc, #320]	; (80031f4 <I2C_Master_ISR_DMA+0x214>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e002      	b.n	80030c4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697c      	ldr	r4, [r7, #20]
 80030cc:	2312      	movs	r3, #18
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	8819      	ldrh	r1, [r3, #0]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0023      	movs	r3, r4
 80030da:	f000 fe6b 	bl	8003db4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2241      	movs	r2, #65	; 0x41
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b22      	cmp	r3, #34	; 0x22
 80030fa:	d109      	bne.n	8003110 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	0209      	lsls	r1, r1, #8
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800310e:	e067      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	01c9      	lsls	r1, r1, #7
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003122:	e05d      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	049b      	lsls	r3, r3, #18
 800312e:	401a      	ands	r2, r3
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	049b      	lsls	r3, r3, #18
 8003134:	429a      	cmp	r2, r3
 8003136:	d004      	beq.n	8003142 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f9f6 	bl	800352c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003140:	e04e      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fce8 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800314c:	e048      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	001a      	movs	r2, r3
 8003154:	2301      	movs	r3, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d02e      	beq.n	80031b8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	001a      	movs	r2, r3
 8003160:	2301      	movs	r3, #1
 8003162:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003164:	d028      	beq.n	80031b8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	049b      	lsls	r3, r3, #18
 800317a:	401a      	ands	r2, r3
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	049b      	lsls	r3, r3, #18
 8003180:	429a      	cmp	r2, r3
 8003182:	d02c      	beq.n	80031de <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <I2C_Master_ISR_DMA+0x214>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d109      	bne.n	80031a2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	01c9      	lsls	r1, r1, #7
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80031a0:	e01d      	b.n	80031de <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f9c1 	bl	800352c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80031aa:	e018      	b.n	80031de <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 fcb3 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80031b6:	e012      	b.n	80031de <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	001a      	movs	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	d00d      	beq.n	80031e0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	001a      	movs	r2, r3
 80031ca:	2301      	movs	r3, #1
 80031cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031ce:	d007      	beq.n	80031e0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0011      	movs	r1, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fa50 	bl	800367c <I2C_ITMasterCplt>
 80031dc:	e000      	b.n	80031e0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80031de:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b007      	add	sp, #28
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2240      	movs	r2, #64	; 0x40
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <I2C_Slave_ISR_DMA+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e0dd      	b.n	80033d8 <I2C_Slave_ISR_DMA+0x1e0>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	001a      	movs	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	001a      	movs	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800323a:	d005      	beq.n	8003248 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 faec 	bl	8003820 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	001a      	movs	r2, r3
 800324e:	2301      	movs	r3, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <I2C_Slave_ISR_DMA+0x5e>
 8003254:	e0a9      	b.n	80033aa <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	001a      	movs	r2, r3
 800325c:	2301      	movs	r3, #1
 800325e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003260:	d100      	bne.n	8003264 <I2C_Slave_ISR_DMA+0x6c>
 8003262:	e0a2      	b.n	80033aa <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0b9b      	lsrs	r3, r3, #14
 8003268:	001a      	movs	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	4013      	ands	r3, r2
 800326e:	d106      	bne.n	800327e <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0bdb      	lsrs	r3, r3, #15
 8003274:	001a      	movs	r2, r3
 8003276:	2301      	movs	r3, #1
 8003278:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800327a:	d100      	bne.n	800327e <I2C_Slave_ISR_DMA+0x86>
 800327c:	e08e      	b.n	800339c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0bdb      	lsrs	r3, r3, #15
 800328a:	001a      	movs	r2, r3
 800328c:	2301      	movs	r3, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d007      	beq.n	80032a2 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0b9b      	lsrs	r3, r3, #14
 80032ae:	001a      	movs	r2, r3
 80032b0:	2301      	movs	r3, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	d007      	beq.n	80032c6 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d12d      	bne.n	8003328 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2241      	movs	r2, #65	; 0x41
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b28      	cmp	r3, #40	; 0x28
 80032d6:	d10b      	bne.n	80032f0 <I2C_Slave_ISR_DMA+0xf8>
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	049b      	lsls	r3, r3, #18
 80032de:	429a      	cmp	r2, r3
 80032e0:	d106      	bne.n	80032f0 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fbbd 	bl	8003a68 <I2C_ITListenCplt>
 80032ee:	e054      	b.n	800339a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2241      	movs	r2, #65	; 0x41
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b29      	cmp	r3, #41	; 0x29
 80032fa:	d110      	bne.n	800331e <I2C_Slave_ISR_DMA+0x126>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <I2C_Slave_ISR_DMA+0x1e8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00c      	beq.n	800331e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fd0f 	bl	8003d32 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f94a 	bl	80035b0 <I2C_ITSlaveSeqCplt>
 800331c:	e03d      	b.n	800339a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003326:	e03e      	b.n	80033a6 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2210      	movs	r2, #16
 800332e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	2204      	movs	r2, #4
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800333c:	2317      	movs	r3, #23
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	2141      	movs	r1, #65	; 0x41
 8003344:	5c52      	ldrb	r2, [r2, r1]
 8003346:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <I2C_Slave_ISR_DMA+0x160>
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	045b      	lsls	r3, r3, #17
 8003354:	429a      	cmp	r2, r3
 8003356:	d126      	bne.n	80033a6 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003358:	2217      	movs	r2, #23
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d003      	beq.n	800336a <I2C_Slave_ISR_DMA+0x172>
 8003362:	18bb      	adds	r3, r7, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b29      	cmp	r3, #41	; 0x29
 8003368:	d103      	bne.n	8003372 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e00b      	b.n	800338a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003372:	2217      	movs	r2, #23
 8003374:	18bb      	adds	r3, r7, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b22      	cmp	r3, #34	; 0x22
 800337a:	d003      	beq.n	8003384 <I2C_Slave_ISR_DMA+0x18c>
 800337c:	18bb      	adds	r3, r7, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b2a      	cmp	r3, #42	; 0x2a
 8003382:	d102      	bne.n	800338a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	0011      	movs	r1, r2
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fbc2 	bl	8003b1c <I2C_ITError>
      if (treatdmanack == 1U)
 8003398:	e005      	b.n	80033a6 <I2C_Slave_ISR_DMA+0x1ae>
 800339a:	e004      	b.n	80033a6 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033a4:	e013      	b.n	80033ce <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80033a6:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033a8:	e011      	b.n	80033ce <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	001a      	movs	r2, r3
 80033b0:	2301      	movs	r3, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	d00b      	beq.n	80033ce <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	001a      	movs	r2, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80033c0:	d005      	beq.n	80033ce <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f80b 	bl	80033e4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2240      	movs	r2, #64	; 0x40
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b008      	add	sp, #32
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	ffff0000 	.word	0xffff0000

080033e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	001a      	movs	r2, r3
 80033f8:	2328      	movs	r3, #40	; 0x28
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b28      	cmp	r3, #40	; 0x28
 80033fe:	d000      	beq.n	8003402 <I2C_ITAddrCplt+0x1e>
 8003400:	e088      	b.n	8003514 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	b2da      	uxtb	r2, r3
 800340c:	250f      	movs	r5, #15
 800340e:	197b      	adds	r3, r7, r5
 8003410:	2101      	movs	r1, #1
 8003412:	400a      	ands	r2, r1
 8003414:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	b29a      	uxth	r2, r3
 8003420:	200c      	movs	r0, #12
 8003422:	183b      	adds	r3, r7, r0
 8003424:	21fe      	movs	r1, #254	; 0xfe
 8003426:	400a      	ands	r2, r1
 8003428:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	b29a      	uxth	r2, r3
 8003432:	240a      	movs	r4, #10
 8003434:	193b      	adds	r3, r7, r4
 8003436:	0592      	lsls	r2, r2, #22
 8003438:	0d92      	lsrs	r2, r2, #22
 800343a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	b29a      	uxth	r2, r3
 8003444:	2308      	movs	r3, #8
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	21fe      	movs	r1, #254	; 0xfe
 800344a:	400a      	ands	r2, r1
 800344c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d148      	bne.n	80034e8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003456:	0021      	movs	r1, r4
 8003458:	187b      	adds	r3, r7, r1
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	09db      	lsrs	r3, r3, #7
 800345e:	b29a      	uxth	r2, r3
 8003460:	183b      	adds	r3, r7, r0
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	4053      	eors	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	001a      	movs	r2, r3
 800346a:	2306      	movs	r3, #6
 800346c:	4013      	ands	r3, r2
 800346e:	d120      	bne.n	80034b2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003470:	183b      	adds	r3, r7, r0
 8003472:	187a      	adds	r2, r7, r1
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	2b02      	cmp	r3, #2
 8003488:	d14c      	bne.n	8003524 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2208      	movs	r2, #8
 8003496:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2240      	movs	r2, #64	; 0x40
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	197b      	adds	r3, r7, r5
 80034a6:	7819      	ldrb	r1, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd fc2a 	bl	8000d04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034b0:	e038      	b.n	8003524 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80034b2:	240c      	movs	r4, #12
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2208      	movs	r2, #8
 80034b8:	18ba      	adds	r2, r7, r2
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fd1e 	bl	8003f08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	7819      	ldrb	r1, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fc0f 	bl	8000d04 <HAL_I2C_AddrCallback>
}
 80034e6:	e01d      	b.n	8003524 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	021a      	lsls	r2, r3, #8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fd09 	bl	8003f08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	2100      	movs	r1, #0
 80034fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034fe:	230c      	movs	r3, #12
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	230f      	movs	r3, #15
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	7819      	ldrb	r1, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f7fd fbf9 	bl	8000d04 <HAL_I2C_AddrCallback>
}
 8003512:	e007      	b.n	8003524 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bdb0      	pop	{r4, r5, r7, pc}

0800352c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2242      	movs	r2, #66	; 0x42
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2241      	movs	r2, #65	; 0x41
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b21      	cmp	r3, #33	; 0x21
 8003546:	d117      	bne.n	8003578 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2241      	movs	r2, #65	; 0x41
 800354c:	2120      	movs	r1, #32
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2211      	movs	r2, #17
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2101      	movs	r1, #1
 8003560:	0018      	movs	r0, r3
 8003562:	f000 fcd1 	bl	8003f08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff fbef 	bl	8002d54 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003576:	e016      	b.n	80035a6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2241      	movs	r2, #65	; 0x41
 800357c:	2120      	movs	r1, #32
 800357e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2212      	movs	r2, #18
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2102      	movs	r1, #2
 8003590:	0018      	movs	r0, r3
 8003592:	f000 fcb9 	bl	8003f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2240      	movs	r2, #64	; 0x40
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fbdf 	bl	8002d64 <HAL_I2C_MasterRxCpltCallback>
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2242      	movs	r2, #66	; 0x42
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	0b9b      	lsrs	r3, r3, #14
 80035cc:	001a      	movs	r2, r3
 80035ce:	2301      	movs	r3, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d008      	beq.n	80035e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4925      	ldr	r1, [pc, #148]	; (8003674 <I2C_ITSlaveSeqCplt+0xc4>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e00d      	b.n	8003602 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0bdb      	lsrs	r3, r3, #15
 80035ea:	001a      	movs	r2, r3
 80035ec:	2301      	movs	r3, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d007      	beq.n	8003602 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	491e      	ldr	r1, [pc, #120]	; (8003678 <I2C_ITSlaveSeqCplt+0xc8>)
 80035fe:	400a      	ands	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2241      	movs	r2, #65	; 0x41
 8003606:	5c9b      	ldrb	r3, [r3, r2]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b29      	cmp	r3, #41	; 0x29
 800360c:	d114      	bne.n	8003638 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2241      	movs	r2, #65	; 0x41
 8003612:	2128      	movs	r1, #40	; 0x28
 8003614:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2101      	movs	r1, #1
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fc71 	bl	8003f08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2240      	movs	r2, #64	; 0x40
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f7fd fb49 	bl	8000cc8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003636:	e019      	b.n	800366c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b2a      	cmp	r3, #42	; 0x2a
 8003642:	d113      	bne.n	800366c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2241      	movs	r2, #65	; 0x41
 8003648:	2128      	movs	r1, #40	; 0x28
 800364a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2222      	movs	r2, #34	; 0x22
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2102      	movs	r1, #2
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fc56 	bl	8003f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd fb3e 	bl	8000ce8 <HAL_I2C_SlaveRxCpltCallback>
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}
 8003674:	ffffbfff 	.word	0xffffbfff
 8003678:	ffff7fff 	.word	0xffff7fff

0800367c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2220      	movs	r2, #32
 8003690:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2241      	movs	r2, #65	; 0x41
 8003696:	5c9b      	ldrb	r3, [r3, r2]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b21      	cmp	r3, #33	; 0x21
 800369c:	d108      	bne.n	80036b0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2101      	movs	r1, #1
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 fc30 	bl	8003f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2211      	movs	r2, #17
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
 80036ae:	e00d      	b.n	80036cc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2241      	movs	r2, #65	; 0x41
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b22      	cmp	r3, #34	; 0x22
 80036ba:	d107      	bne.n	80036cc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2102      	movs	r1, #2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fc21 	bl	8003f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2212      	movs	r2, #18
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4950      	ldr	r1, [pc, #320]	; (8003818 <I2C_ITMasterCplt+0x19c>)
 80036d8:	400a      	ands	r2, r1
 80036da:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4d      	ldr	r2, [pc, #308]	; (800381c <I2C_ITMasterCplt+0x1a0>)
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	001a      	movs	r2, r3
 80036ee:	2301      	movs	r3, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d009      	beq.n	8003708 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2210      	movs	r2, #16
 80036fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	2204      	movs	r2, #4
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2241      	movs	r2, #65	; 0x41
 800370c:	5c9b      	ldrb	r3, [r3, r2]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b60      	cmp	r3, #96	; 0x60
 8003712:	d10b      	bne.n	800372c <I2C_ITMasterCplt+0xb0>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	001a      	movs	r2, r3
 800371a:	2301      	movs	r3, #1
 800371c:	4013      	ands	r3, r2
 800371e:	d005      	beq.n	800372c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2db      	uxtb	r3, r3
 8003728:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800372a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 faff 	bl	8003d32 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2241      	movs	r2, #65	; 0x41
 800373e:	5c9b      	ldrb	r3, [r3, r2]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b60      	cmp	r3, #96	; 0x60
 8003744:	d002      	beq.n	800374c <I2C_ITMasterCplt+0xd0>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f9e1 	bl	8003b1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800375a:	e058      	b.n	800380e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b21      	cmp	r3, #33	; 0x21
 8003766:	d126      	bne.n	80037b6 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2241      	movs	r2, #65	; 0x41
 800376c:	2120      	movs	r1, #32
 800376e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2242      	movs	r2, #66	; 0x42
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d10c      	bne.n	800379c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2242      	movs	r2, #66	; 0x42
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2240      	movs	r2, #64	; 0x40
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f7ff faed 	bl	8002d74 <HAL_I2C_MemTxCpltCallback>
}
 800379a:	e038      	b.n	800380e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2242      	movs	r2, #66	; 0x42
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7ff fad0 	bl	8002d54 <HAL_I2C_MasterTxCpltCallback>
}
 80037b4:	e02b      	b.n	800380e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2241      	movs	r2, #65	; 0x41
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	d125      	bne.n	800380e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2241      	movs	r2, #65	; 0x41
 80037c6:	2120      	movs	r1, #32
 80037c8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2242      	movs	r2, #66	; 0x42
 80037d4:	5c9b      	ldrb	r3, [r3, r2]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d10c      	bne.n	80037f6 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2242      	movs	r2, #66	; 0x42
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff fac8 	bl	8002d84 <HAL_I2C_MemRxCpltCallback>
}
 80037f4:	e00b      	b.n	800380e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2242      	movs	r2, #66	; 0x42
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff faab 	bl	8002d64 <HAL_I2C_MasterRxCpltCallback>
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b006      	add	sp, #24
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	fe00e800 	.word	0xfe00e800
 800381c:	ffff0000 	.word	0xffff0000

08003820 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003836:	200f      	movs	r0, #15
 8003838:	183b      	adds	r3, r7, r0
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	2141      	movs	r1, #65	; 0x41
 800383e:	5c52      	ldrb	r2, [r2, r1]
 8003840:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2220      	movs	r2, #32
 8003848:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b21      	cmp	r3, #33	; 0x21
 8003850:	d003      	beq.n	800385a <I2C_ITSlaveCplt+0x3a>
 8003852:	183b      	adds	r3, r7, r0
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b29      	cmp	r3, #41	; 0x29
 8003858:	d109      	bne.n	800386e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800385a:	4a7d      	ldr	r2, [pc, #500]	; (8003a50 <I2C_ITSlaveCplt+0x230>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fb51 	bl	8003f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2221      	movs	r2, #33	; 0x21
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
 800386c:	e011      	b.n	8003892 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800386e:	220f      	movs	r2, #15
 8003870:	18bb      	adds	r3, r7, r2
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b22      	cmp	r3, #34	; 0x22
 8003876:	d003      	beq.n	8003880 <I2C_ITSlaveCplt+0x60>
 8003878:	18bb      	adds	r3, r7, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b2a      	cmp	r3, #42	; 0x2a
 800387e:	d108      	bne.n	8003892 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003880:	4a74      	ldr	r2, [pc, #464]	; (8003a54 <I2C_ITSlaveCplt+0x234>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f000 fb3e 	bl	8003f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2222      	movs	r2, #34	; 0x22
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	0209      	lsls	r1, r1, #8
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	496a      	ldr	r1, [pc, #424]	; (8003a58 <I2C_ITSlaveCplt+0x238>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fa3b 	bl	8003d32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	0b9b      	lsrs	r3, r3, #14
 80038c0:	001a      	movs	r2, r3
 80038c2:	2301      	movs	r3, #1
 80038c4:	4013      	ands	r3, r2
 80038c6:	d013      	beq.n	80038f0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4962      	ldr	r1, [pc, #392]	; (8003a5c <I2C_ITSlaveCplt+0x23c>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ee:	e018      	b.n	8003922 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	0bdb      	lsrs	r3, r3, #15
 80038f4:	001a      	movs	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d012      	beq.n	8003922 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4956      	ldr	r1, [pc, #344]	; (8003a60 <I2C_ITSlaveCplt+0x240>)
 8003908:	400a      	ands	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	001a      	movs	r2, r3
 8003928:	2301      	movs	r3, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d020      	beq.n	8003970 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2204      	movs	r2, #4
 8003932:	4393      	bics	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	2204      	movs	r2, #4
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2242      	movs	r2, #66	; 0x42
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f8b9 	bl	8003b1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2241      	movs	r2, #65	; 0x41
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b28      	cmp	r3, #40	; 0x28
 80039b4:	d147      	bne.n	8003a46 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f853 	bl	8003a68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039c2:	e040      	b.n	8003a46 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <I2C_ITSlaveCplt+0x244>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d016      	beq.n	80039fc <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff fded 	bl	80035b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <I2C_ITSlaveCplt+0x244>)
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2241      	movs	r2, #65	; 0x41
 80039e0:	2120      	movs	r1, #32
 80039e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fd f9c3 	bl	8000d80 <HAL_I2C_ListenCpltCallback>
}
 80039fa:	e024      	b.n	8003a46 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2241      	movs	r2, #65	; 0x41
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b22      	cmp	r3, #34	; 0x22
 8003a06:	d10f      	bne.n	8003a28 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2241      	movs	r2, #65	; 0x41
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fd f961 	bl	8000ce8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a26:	e00e      	b.n	8003a46 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fd f941 	bl	8000cc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b006      	add	sp, #24
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	00008001 	.word	0x00008001
 8003a54:	00008002 	.word	0x00008002
 8003a58:	fe00e800 	.word	0xfe00e800
 8003a5c:	ffffbfff 	.word	0xffffbfff
 8003a60:	ffff7fff 	.word	0xffff7fff
 8003a64:	ffff0000 	.word	0xffff0000

08003a68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <I2C_ITListenCplt+0xac>)
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2241      	movs	r2, #65	; 0x41
 8003a82:	2120      	movs	r1, #32
 8003a84:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2242      	movs	r2, #66	; 0x42
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d012      	beq.n	8003ae6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	2204      	movs	r2, #4
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <I2C_ITListenCplt+0xb0>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 fa0b 	bl	8003f08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2210      	movs	r2, #16
 8003af8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2240      	movs	r2, #64	; 0x40
 8003afe:	2100      	movs	r1, #0
 8003b00:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fd f93b 	bl	8000d80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	ffff0000 	.word	0xffff0000
 8003b18:	00008003 	.word	0x00008003

08003b1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b26:	200f      	movs	r0, #15
 8003b28:	183b      	adds	r3, r7, r0
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	2141      	movs	r1, #65	; 0x41
 8003b2e:	5c52      	ldrb	r2, [r2, r1]
 8003b30:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2242      	movs	r2, #66	; 0x42
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a62      	ldr	r2, [pc, #392]	; (8003cc8 <I2C_ITError+0x1ac>)
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b28      	cmp	r3, #40	; 0x28
 8003b58:	d007      	beq.n	8003b6a <I2C_ITError+0x4e>
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b29      	cmp	r3, #41	; 0x29
 8003b60:	d003      	beq.n	8003b6a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b2a      	cmp	r3, #42	; 0x2a
 8003b68:	d10c      	bne.n	8003b84 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 f9ca 	bl	8003f08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2241      	movs	r2, #65	; 0x41
 8003b78:	2128      	movs	r1, #40	; 0x28
 8003b7a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a53      	ldr	r2, [pc, #332]	; (8003ccc <I2C_ITError+0x1b0>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
 8003b82:	e012      	b.n	8003baa <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b84:	4a52      	ldr	r2, [pc, #328]	; (8003cd0 <I2C_ITError+0x1b4>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 f9bc 	bl	8003f08 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2241      	movs	r2, #65	; 0x41
 8003b94:	5c9b      	ldrb	r3, [r3, r2]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b60      	cmp	r3, #96	; 0x60
 8003b9a:	d003      	beq.n	8003ba4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2241      	movs	r2, #65	; 0x41
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03b      	beq.n	8003c30 <I2C_ITError+0x114>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b11      	cmp	r3, #17
 8003bbc:	d002      	beq.n	8003bc4 <I2C_ITError+0xa8>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b21      	cmp	r3, #33	; 0x21
 8003bc2:	d135      	bne.n	8003c30 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	01db      	lsls	r3, r3, #7
 8003bce:	401a      	ands	r2, r3
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	493c      	ldr	r1, [pc, #240]	; (8003cd4 <I2C_ITError+0x1b8>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7fe fc43 	bl	8002478 <HAL_DMA_GetState>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d016      	beq.n	8003c26 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <I2C_ITError+0x1bc>)
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fe fbc9 	bl	80023a4 <HAL_DMA_Abort_IT>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d051      	beq.n	8003cba <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	0018      	movs	r0, r3
 8003c22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c24:	e049      	b.n	8003cba <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f859 	bl	8003ce0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c2e:	e044      	b.n	8003cba <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d03b      	beq.n	8003cb0 <I2C_ITError+0x194>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b12      	cmp	r3, #18
 8003c3c:	d002      	beq.n	8003c44 <I2C_ITError+0x128>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b22      	cmp	r3, #34	; 0x22
 8003c42:	d135      	bne.n	8003cb0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	401a      	ands	r2, r3
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	491e      	ldr	r1, [pc, #120]	; (8003cdc <I2C_ITError+0x1c0>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fe fc03 	bl	8002478 <HAL_DMA_GetState>
 8003c72:	0003      	movs	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d016      	beq.n	8003ca6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <I2C_ITError+0x1bc>)
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7fe fb89 	bl	80023a4 <HAL_DMA_Abort_IT>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d013      	beq.n	8003cbe <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca4:	e00b      	b.n	8003cbe <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 f819 	bl	8003ce0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cae:	e006      	b.n	8003cbe <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f814 	bl	8003ce0 <I2C_TreatErrorCallback>
  }
}
 8003cb8:	e002      	b.n	8003cc0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	e000      	b.n	8003cc0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cbe:	46c0      	nop			; (mov r8, r8)
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	ffff0000 	.word	0xffff0000
 8003ccc:	08002db9 	.word	0x08002db9
 8003cd0:	00008003 	.word	0x00008003
 8003cd4:	ffffbfff 	.word	0xffffbfff
 8003cd8:	08003d77 	.word	0x08003d77
 8003cdc:	ffff7fff 	.word	0xffff7fff

08003ce0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2241      	movs	r2, #65	; 0x41
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b60      	cmp	r3, #96	; 0x60
 8003cf2:	d10f      	bne.n	8003d14 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2241      	movs	r2, #65	; 0x41
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2240      	movs	r2, #64	; 0x40
 8003d06:	2100      	movs	r1, #0
 8003d08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff f841 	bl	8002d94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d12:	e00a      	b.n	8003d2a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fd f83b 	bl	8000da0 <HAL_I2C_ErrorCallback>
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2202      	movs	r2, #2
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d103      	bne.n	8003d50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2201      	movs	r2, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d007      	beq.n	8003d6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
  }
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	2200      	movs	r2, #0
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff ff9a 	bl	8003ce0 <I2C_TreatErrorCallback>
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	0008      	movs	r0, r1
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	240a      	movs	r4, #10
 8003dc4:	193b      	adds	r3, r7, r4
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	2009      	movs	r0, #9
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	1c0a      	adds	r2, r1, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	059b      	lsls	r3, r3, #22
 8003dd8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	0419      	lsls	r1, r3, #16
 8003de0:	23ff      	movs	r3, #255	; 0xff
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	4313      	orrs	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfe:	0d51      	lsrs	r1, r2, #21
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	00d2      	lsls	r2, r2, #3
 8003e04:	400a      	ands	r2, r1
 8003e06:	4907      	ldr	r1, [pc, #28]	; (8003e24 <I2C_TransferConfig+0x70>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	43d2      	mvns	r2, r2
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	0011      	movs	r1, r2
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b007      	add	sp, #28
 8003e20:	bd90      	pop	{r4, r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	03ff63ff 	.word	0x03ff63ff

08003e28 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	000a      	movs	r2, r1
 8003e32:	1cbb      	adds	r3, r7, #2
 8003e34:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <I2C_Enable_IRQ+0xd8>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d004      	beq.n	8003e4e <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e48:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <I2C_Enable_IRQ+0xdc>)
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d121      	bne.n	8003e92 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e4e:	1cbb      	adds	r3, r7, #2
 8003e50:	2200      	movs	r2, #0
 8003e52:	5e9b      	ldrsh	r3, [r3, r2]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da03      	bge.n	8003e60 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22b8      	movs	r2, #184	; 0xb8
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e60:	1cbb      	adds	r3, r7, #2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d103      	bne.n	8003e70 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2290      	movs	r2, #144	; 0x90
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e70:	1cbb      	adds	r3, r7, #2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d103      	bne.n	8003e80 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2260      	movs	r2, #96	; 0x60
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e80:	1cbb      	adds	r3, r7, #2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d12f      	bne.n	8003ee8 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e90:	e02a      	b.n	8003ee8 <I2C_Enable_IRQ+0xc0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e92:	1cbb      	adds	r3, r7, #2
 8003e94:	2200      	movs	r2, #0
 8003e96:	5e9b      	ldrsh	r3, [r3, r2]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da03      	bge.n	8003ea4 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22b8      	movs	r2, #184	; 0xb8
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ea4:	1cbb      	adds	r3, r7, #2
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	22f2      	movs	r2, #242	; 0xf2
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003eb6:	1cbb      	adds	r3, r7, #2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22f4      	movs	r2, #244	; 0xf4
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ec8:	1cbb      	adds	r3, r7, #2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d103      	bne.n	8003ed8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2290      	movs	r2, #144	; 0x90
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ed8:	1cbb      	adds	r3, r7, #2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d103      	bne.n	8003ee8 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	08002fe1 	.word	0x08002fe1
 8003f04:	080031f9 	.word	0x080031f9

08003f08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	000a      	movs	r2, r1
 8003f12:	1cbb      	adds	r3, r7, #2
 8003f14:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f1a:	1cbb      	adds	r3, r7, #2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d010      	beq.n	8003f46 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2242      	movs	r2, #66	; 0x42
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2241      	movs	r2, #65	; 0x41
 8003f30:	5c9b      	ldrb	r3, [r3, r2]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	001a      	movs	r2, r3
 8003f36:	2328      	movs	r3, #40	; 0x28
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b28      	cmp	r3, #40	; 0x28
 8003f3c:	d003      	beq.n	8003f46 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	22b0      	movs	r2, #176	; 0xb0
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f46:	1cbb      	adds	r3, r7, #2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d010      	beq.n	8003f72 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2244      	movs	r2, #68	; 0x44
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2241      	movs	r2, #65	; 0x41
 8003f5c:	5c9b      	ldrb	r3, [r3, r2]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	001a      	movs	r2, r3
 8003f62:	2328      	movs	r3, #40	; 0x28
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b28      	cmp	r3, #40	; 0x28
 8003f68:	d003      	beq.n	8003f72 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	22b0      	movs	r2, #176	; 0xb0
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f72:	1cbb      	adds	r3, r7, #2
 8003f74:	2200      	movs	r2, #0
 8003f76:	5e9b      	ldrsh	r3, [r3, r2]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da03      	bge.n	8003f84 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	22b8      	movs	r2, #184	; 0xb8
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f84:	1cbb      	adds	r3, r7, #2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d103      	bne.n	8003f94 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2290      	movs	r2, #144	; 0x90
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f94:	1cbb      	adds	r3, r7, #2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d103      	bne.n	8003fa4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fa4:	1cbb      	adds	r3, r7, #2
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d103      	bne.n	8003fb4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43d9      	mvns	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2241      	movs	r2, #65	; 0x41
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d138      	bne.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	5c9b      	ldrb	r3, [r3, r2]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e032      	b.n	800405a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2240      	movs	r2, #64	; 0x40
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2241      	movs	r2, #65	; 0x41
 8004000:	2124      	movs	r1, #36	; 0x24
 8004002:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	438a      	bics	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4911      	ldr	r1, [pc, #68]	; (8004064 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004020:	400a      	ands	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2241      	movs	r2, #65	; 0x41
 8004048:	2120      	movs	r1, #32
 800404a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b002      	add	sp, #8
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	ffffefff 	.word	0xffffefff

08004068 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2241      	movs	r2, #65	; 0x41
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d139      	bne.n	80040f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004088:	2302      	movs	r3, #2
 800408a:	e033      	b.n	80040f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	2101      	movs	r1, #1
 8004092:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2241      	movs	r2, #65	; 0x41
 8004098:	2124      	movs	r1, #36	; 0x24
 800409a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2101      	movs	r1, #1
 80040a8:	438a      	bics	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a11      	ldr	r2, [pc, #68]	; (80040fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	430a      	orrs	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2241      	movs	r2, #65	; 0x41
 80040e2:	2120      	movs	r1, #32
 80040e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040f2:	2302      	movs	r3, #2
  }
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	fffff0ff 	.word	0xfffff0ff

08004100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d11f      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	0013      	movs	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	189b      	adds	r3, r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fb ffec 	bl	8000110 <__udivsi3>
 8004138:	0003      	movs	r3, r0
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	e008      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3b01      	subs	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e001      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e009      	b.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	401a      	ands	r2, r3
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	429a      	cmp	r2, r3
 8004162:	d0ed      	beq.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	40007000 	.word	0x40007000
 8004174:	fffff9ff 	.word	0xfffff9ff
 8004178:	20000014 	.word	0x20000014
 800417c:	000f4240 	.word	0x000f4240

08004180 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	23e0      	movs	r3, #224	; 0xe0
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	4013      	ands	r3, r2
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000

08004198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e2f3      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	4013      	ands	r3, r2
 80041b2:	d100      	bne.n	80041b6 <HAL_RCC_OscConfig+0x1e>
 80041b4:	e07c      	b.n	80042b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4bc3      	ldr	r3, [pc, #780]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2238      	movs	r2, #56	; 0x38
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	4bc0      	ldr	r3, [pc, #768]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2203      	movs	r2, #3
 80041c6:	4013      	ands	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3e>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d10b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4bb9      	ldr	r3, [pc, #740]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	029b      	lsls	r3, r3, #10
 80041e4:	4013      	ands	r3, r2
 80041e6:	d062      	beq.n	80042ae <HAL_RCC_OscConfig+0x116>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15e      	bne.n	80042ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e2ce      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	025b      	lsls	r3, r3, #9
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
 8004200:	4bb0      	ldr	r3, [pc, #704]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4baf      	ldr	r3, [pc, #700]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	0249      	lsls	r1, r1, #9
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e020      	b.n	8004252 <HAL_RCC_OscConfig+0xba>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	23a0      	movs	r3, #160	; 0xa0
 8004216:	02db      	lsls	r3, r3, #11
 8004218:	429a      	cmp	r2, r3
 800421a:	d10e      	bne.n	800423a <HAL_RCC_OscConfig+0xa2>
 800421c:	4ba9      	ldr	r3, [pc, #676]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4ba8      	ldr	r3, [pc, #672]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	02c9      	lsls	r1, r1, #11
 8004226:	430a      	orrs	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0249      	lsls	r1, r1, #9
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e00b      	b.n	8004252 <HAL_RCC_OscConfig+0xba>
 800423a:	4ba2      	ldr	r3, [pc, #648]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4ba1      	ldr	r3, [pc, #644]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004240:	49a1      	ldr	r1, [pc, #644]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004242:	400a      	ands	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	4b9f      	ldr	r3, [pc, #636]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b9e      	ldr	r3, [pc, #632]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800424c:	499f      	ldr	r1, [pc, #636]	; (80044cc <HAL_RCC_OscConfig+0x334>)
 800424e:	400a      	ands	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fd ff97 	bl	800218c <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004264:	f7fd ff92 	bl	800218c <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	; 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e28d      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	4b93      	ldr	r3, [pc, #588]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	4013      	ands	r3, r2
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0xcc>
 8004282:	e015      	b.n	80042b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd ff82 	bl	800218c <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428e:	f7fd ff7d 	bl	800218c <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e278      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a0:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	029b      	lsls	r3, r3, #10
 80042a8:	4013      	ands	r3, r2
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0xf6>
 80042ac:	e000      	b.n	80042b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2202      	movs	r2, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	d100      	bne.n	80042bc <HAL_RCC_OscConfig+0x124>
 80042ba:	e099      	b.n	80043f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042bc:	4b81      	ldr	r3, [pc, #516]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2238      	movs	r2, #56	; 0x38
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c6:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2203      	movs	r2, #3
 80042cc:	4013      	ands	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0x144>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d002      	beq.n	80042e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d135      	bne.n	800434e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e2:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4013      	ands	r3, r2
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x162>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e24b      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b72      	ldr	r3, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a74      	ldr	r2, [pc, #464]	; (80044d0 <HAL_RCC_OscConfig+0x338>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	021a      	lsls	r2, r3, #8
 800430a:	4b6e      	ldr	r3, [pc, #440]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d112      	bne.n	800433c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004316:	4b6b      	ldr	r3, [pc, #428]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x33c>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004326:	430a      	orrs	r2, r1
 8004328:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800432a:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0adb      	lsrs	r3, r3, #11
 8004330:	2207      	movs	r2, #7
 8004332:	4013      	ands	r3, r2
 8004334:	4a68      	ldr	r2, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x340>)
 8004336:	40da      	lsrs	r2, r3
 8004338:	4b68      	ldr	r3, [pc, #416]	; (80044dc <HAL_RCC_OscConfig+0x344>)
 800433a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_OscConfig+0x348>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0018      	movs	r0, r3
 8004342:	f7fd fec7 	bl	80020d4 <HAL_InitTick>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d051      	beq.n	80043ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e221      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d030      	beq.n	80043b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004356:	4b5b      	ldr	r3, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <HAL_RCC_OscConfig+0x33c>)
 800435c:	4013      	ands	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	0049      	lsls	r1, r1, #1
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd ff08 	bl	800218c <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004382:	f7fd ff03 	bl	800218c <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1fe      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4013      	ands	r3, r2
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a4a      	ldr	r2, [pc, #296]	; (80044d0 <HAL_RCC_OscConfig+0x338>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	021a      	lsls	r2, r3, #8
 80043b0:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e01b      	b.n	80043f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043b8:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043be:	4949      	ldr	r1, [pc, #292]	; (80044e4 <HAL_RCC_OscConfig+0x34c>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fee2 	bl	800218c <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd fedd 	bl	800218c <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1d8      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e0:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4013      	ands	r3, r2
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x236>
 80043ec:	e000      	b.n	80043f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	4013      	ands	r3, r2
 80043f8:	d047      	beq.n	800448a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2238      	movs	r2, #56	; 0x38
 8004400:	4013      	ands	r3, r2
 8004402:	2b18      	cmp	r3, #24
 8004404:	d10a      	bne.n	800441c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004406:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	2202      	movs	r2, #2
 800440c:	4013      	ands	r3, r2
 800440e:	d03c      	beq.n	800448a <HAL_RCC_OscConfig+0x2f2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d138      	bne.n	800448a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e1ba      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d019      	beq.n	8004458 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800442a:	2101      	movs	r1, #1
 800442c:	430a      	orrs	r2, r1
 800442e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd feac 	bl	800218c <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fea7 	bl	800218c <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a2      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	2202      	movs	r2, #2
 8004452:	4013      	ands	r3, r2
 8004454:	d0f1      	beq.n	800443a <HAL_RCC_OscConfig+0x2a2>
 8004456:	e018      	b.n	800448a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800445a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 800445e:	2101      	movs	r1, #1
 8004460:	438a      	bics	r2, r1
 8004462:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd fe92 	bl	800218c <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fd fe8d 	bl	800218c <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e188      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	2202      	movs	r2, #2
 8004486:	4013      	ands	r3, r2
 8004488:	d1f1      	bne.n	800446e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2204      	movs	r2, #4
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_RCC_OscConfig+0x2fe>
 8004494:	e0c6      	b.n	8004624 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	231f      	movs	r3, #31
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2238      	movs	r2, #56	; 0x38
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d11e      	bne.n	80044e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCC_OscConfig+0x32c>)
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	2202      	movs	r2, #2
 80044b0:	4013      	ands	r3, r2
 80044b2:	d100      	bne.n	80044b6 <HAL_RCC_OscConfig+0x31e>
 80044b4:	e0b6      	b.n	8004624 <HAL_RCC_OscConfig+0x48c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d000      	beq.n	80044c0 <HAL_RCC_OscConfig+0x328>
 80044be:	e0b1      	b.n	8004624 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e166      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	fffeffff 	.word	0xfffeffff
 80044cc:	fffbffff 	.word	0xfffbffff
 80044d0:	ffff80ff 	.word	0xffff80ff
 80044d4:	ffffc7ff 	.word	0xffffc7ff
 80044d8:	00f42400 	.word	0x00f42400
 80044dc:	20000014 	.word	0x20000014
 80044e0:	20000018 	.word	0x20000018
 80044e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044e8:	4bac      	ldr	r3, [pc, #688]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80044ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	055b      	lsls	r3, r3, #21
 80044f0:	4013      	ands	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x360>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x362>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	4ba7      	ldr	r3, [pc, #668]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004502:	4ba6      	ldr	r3, [pc, #664]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	0549      	lsls	r1, r1, #21
 8004508:	430a      	orrs	r2, r1
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c
 800450c:	4ba3      	ldr	r3, [pc, #652]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800450e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	055b      	lsls	r3, r3, #21
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800451a:	231f      	movs	r3, #31
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004522:	4b9f      	ldr	r3, [pc, #636]	; (80047a0 <HAL_RCC_OscConfig+0x608>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d11a      	bne.n	8004564 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452e:	4b9c      	ldr	r3, [pc, #624]	; (80047a0 <HAL_RCC_OscConfig+0x608>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b9b      	ldr	r3, [pc, #620]	; (80047a0 <HAL_RCC_OscConfig+0x608>)
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	0049      	lsls	r1, r1, #1
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800453c:	f7fd fe26 	bl	800218c <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fd fe21 	bl	800218c <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e11c      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004558:	4b91      	ldr	r3, [pc, #580]	; (80047a0 <HAL_RCC_OscConfig+0x608>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4013      	ands	r3, r2
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x3e2>
 800456c:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800456e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004570:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004572:	2101      	movs	r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	65da      	str	r2, [r3, #92]	; 0x5c
 8004578:	e01c      	b.n	80045b4 <HAL_RCC_OscConfig+0x41c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b05      	cmp	r3, #5
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x404>
 8004582:	4b86      	ldr	r3, [pc, #536]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004586:	4b85      	ldr	r3, [pc, #532]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004588:	2104      	movs	r1, #4
 800458a:	430a      	orrs	r2, r1
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c
 800458e:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004592:	4b82      	ldr	r3, [pc, #520]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004594:	2101      	movs	r1, #1
 8004596:	430a      	orrs	r2, r1
 8004598:	65da      	str	r2, [r3, #92]	; 0x5c
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x41c>
 800459c:	4b7f      	ldr	r3, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800459e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045a0:	4b7e      	ldr	r3, [pc, #504]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80045a2:	2101      	movs	r1, #1
 80045a4:	438a      	bics	r2, r1
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045a8:	4b7c      	ldr	r3, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80045aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ac:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80045ae:	2104      	movs	r1, #4
 80045b0:	438a      	bics	r2, r1
 80045b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d014      	beq.n	80045e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fde6 	bl	800218c <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c4:	e009      	b.n	80045da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd fde1 	bl	800218c <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_RCC_OscConfig+0x60c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0db      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045da:	4b70      	ldr	r3, [pc, #448]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x42e>
 80045e4:	e013      	b.n	800460e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fdd1 	bl	800218c <HAL_GetTick>
 80045ea:	0003      	movs	r3, r0
 80045ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ee:	e009      	b.n	8004604 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fd fdcc 	bl	800218c <HAL_GetTick>
 80045f4:	0002      	movs	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <HAL_RCC_OscConfig+0x60c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0c6      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004604:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	2202      	movs	r2, #2
 800460a:	4013      	ands	r3, r2
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800460e:	231f      	movs	r3, #31
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b60      	ldr	r3, [pc, #384]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800461e:	4962      	ldr	r1, [pc, #392]	; (80047a8 <HAL_RCC_OscConfig+0x610>)
 8004620:	400a      	ands	r2, r1
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d100      	bne.n	800462e <HAL_RCC_OscConfig+0x496>
 800462c:	e0b0      	b.n	8004790 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462e:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2238      	movs	r2, #56	; 0x38
 8004634:	4013      	ands	r3, r2
 8004636:	2b10      	cmp	r3, #16
 8004638:	d100      	bne.n	800463c <HAL_RCC_OscConfig+0x4a4>
 800463a:	e078      	b.n	800472e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d153      	bne.n	80046ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004644:	4b55      	ldr	r3, [pc, #340]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b54      	ldr	r3, [pc, #336]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800464a:	4958      	ldr	r1, [pc, #352]	; (80047ac <HAL_RCC_OscConfig+0x614>)
 800464c:	400a      	ands	r2, r1
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fd9c 	bl	800218c <HAL_GetTick>
 8004654:	0003      	movs	r3, r0
 8004656:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd fd97 	bl	800218c <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e092      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	049b      	lsls	r3, r3, #18
 8004674:	4013      	ands	r3, r2
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004678:	4b48      	ldr	r3, [pc, #288]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_RCC_OscConfig+0x618>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	431a      	orrs	r2, r3
 80046a0:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a6:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	0449      	lsls	r1, r1, #17
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	0549      	lsls	r1, r1, #21
 80046be:	430a      	orrs	r2, r1
 80046c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fd fd63 	bl	800218c <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd fd5e 	bl	800218c <HAL_GetTick>
 80046d0:	0002      	movs	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e059      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	049b      	lsls	r3, r3, #18
 80046e6:	4013      	ands	r3, r2
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x534>
 80046ea:	e051      	b.n	8004790 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x604>)
 80046f2:	492e      	ldr	r1, [pc, #184]	; (80047ac <HAL_RCC_OscConfig+0x614>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fd48 	bl	800218c <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd fd43 	bl	800218c <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03e      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	049b      	lsls	r3, r3, #18
 800471c:	4013      	ands	r3, r2
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x604>)
 8004726:	4923      	ldr	r1, [pc, #140]	; (80047b4 <HAL_RCC_OscConfig+0x61c>)
 8004728:	400a      	ands	r2, r1
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e030      	b.n	8004790 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02b      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_RCC_OscConfig+0x604>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2203      	movs	r2, #3
 8004744:	401a      	ands	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	429a      	cmp	r2, r3
 800474c:	d11e      	bne.n	800478c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2270      	movs	r2, #112	; 0x70
 8004752:	401a      	ands	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d117      	bne.n	800478c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	23fe      	movs	r3, #254	; 0xfe
 8004760:	01db      	lsls	r3, r3, #7
 8004762:	401a      	ands	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d10e      	bne.n	800478c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	23f8      	movs	r3, #248	; 0xf8
 8004772:	039b      	lsls	r3, r3, #14
 8004774:	401a      	ands	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d106      	bne.n	800478c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	0f5b      	lsrs	r3, r3, #29
 8004782:	075a      	lsls	r2, r3, #29
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b008      	add	sp, #32
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	00001388 	.word	0x00001388
 80047a8:	efffffff 	.word	0xefffffff
 80047ac:	feffffff 	.word	0xfeffffff
 80047b0:	1fc1808c 	.word	0x1fc1808c
 80047b4:	effefffc 	.word	0xeffefffc

080047b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0e9      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047cc:	4b76      	ldr	r3, [pc, #472]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2207      	movs	r2, #7
 80047d2:	4013      	ands	r3, r2
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d91e      	bls.n	8004818 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2207      	movs	r2, #7
 80047e0:	4393      	bics	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047ec:	f7fd fcce 	bl	800218c <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047f4:	e009      	b.n	800480a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f6:	f7fd fcc9 	bl	800218c <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <HAL_RCC_ClockConfig+0x1f4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0ca      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800480a:	4b67      	ldr	r3, [pc, #412]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2207      	movs	r2, #7
 8004810:	4013      	ands	r3, r2
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d1ee      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2202      	movs	r2, #2
 800481e:	4013      	ands	r3, r2
 8004820:	d015      	beq.n	800484e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2204      	movs	r2, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d006      	beq.n	800483a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800482c:	4b60      	ldr	r3, [pc, #384]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004832:	21e0      	movs	r1, #224	; 0xe0
 8004834:	01c9      	lsls	r1, r1, #7
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483a:	4b5d      	ldr	r3, [pc, #372]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a5d      	ldr	r2, [pc, #372]	; (80049b4 <HAL_RCC_ClockConfig+0x1fc>)
 8004840:	4013      	ands	r3, r2
 8004842:	0019      	movs	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2201      	movs	r2, #1
 8004854:	4013      	ands	r3, r2
 8004856:	d057      	beq.n	8004908 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	029b      	lsls	r3, r3, #10
 8004868:	4013      	ands	r3, r2
 800486a:	d12b      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e097      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	049b      	lsls	r3, r3, #18
 8004880:	4013      	ands	r3, r2
 8004882:	d11f      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e08b      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004890:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4013      	ands	r3, r2
 800489a:	d113      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e07f      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d106      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a8:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	2202      	movs	r2, #2
 80048ae:	4013      	ands	r3, r2
 80048b0:	d108      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e074      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	2202      	movs	r2, #2
 80048bc:	4013      	ands	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06d      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c4:	4b3a      	ldr	r3, [pc, #232]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2207      	movs	r2, #7
 80048ca:	4393      	bics	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd fc58 	bl	800218c <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e0:	e009      	b.n	80048f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e2:	f7fd fc53 	bl	800218c <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_RCC_ClockConfig+0x1f4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e054      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2238      	movs	r2, #56	; 0x38
 80048fc:	401a      	ands	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	429a      	cmp	r2, r3
 8004906:	d1ec      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2207      	movs	r2, #7
 800490e:	4013      	ands	r3, r2
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d21e      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2207      	movs	r2, #7
 800491c:	4393      	bics	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004928:	f7fd fc30 	bl	800218c <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004930:	e009      	b.n	8004946 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004932:	f7fd fc2b 	bl	800218c <HAL_GetTick>
 8004936:	0002      	movs	r2, r0
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_RCC_ClockConfig+0x1f4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e02c      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2207      	movs	r2, #7
 800494c:	4013      	ands	r3, r2
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2204      	movs	r2, #4
 800495a:	4013      	ands	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_RCC_ClockConfig+0x200>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004972:	f000 f829 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004976:	0001      	movs	r1, r0
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	220f      	movs	r2, #15
 8004980:	401a      	ands	r2, r3
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <HAL_RCC_ClockConfig+0x204>)
 8004984:	0092      	lsls	r2, r2, #2
 8004986:	58d3      	ldr	r3, [r2, r3]
 8004988:	221f      	movs	r2, #31
 800498a:	4013      	ands	r3, r2
 800498c:	000a      	movs	r2, r1
 800498e:	40da      	lsrs	r2, r3
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_ClockConfig+0x208>)
 8004992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x20c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fd fb9b 	bl	80020d4 <HAL_InitTick>
 800499e:	0003      	movs	r3, r0
}
 80049a0:	0018      	movs	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b004      	add	sp, #16
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40022000 	.word	0x40022000
 80049ac:	00001388 	.word	0x00001388
 80049b0:	40021000 	.word	0x40021000
 80049b4:	fffff0ff 	.word	0xfffff0ff
 80049b8:	ffff8fff 	.word	0xffff8fff
 80049bc:	08005bfc 	.word	0x08005bfc
 80049c0:	20000014 	.word	0x20000014
 80049c4:	20000018 	.word	0x20000018

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2238      	movs	r2, #56	; 0x38
 80049d4:	4013      	ands	r3, r2
 80049d6:	d10f      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0adb      	lsrs	r3, r3, #11
 80049de:	2207      	movs	r2, #7
 80049e0:	4013      	ands	r3, r2
 80049e2:	2201      	movs	r2, #1
 80049e4:	409a      	lsls	r2, r3
 80049e6:	0013      	movs	r3, r2
 80049e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	4835      	ldr	r0, [pc, #212]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049ee:	f7fb fb8f 	bl	8000110 <__udivsi3>
 80049f2:	0003      	movs	r3, r0
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e05d      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2238      	movs	r2, #56	; 0x38
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a04:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e054      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2238      	movs	r2, #56	; 0x38
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d138      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	2207      	movs	r2, #7
 8004a28:	4013      	ands	r3, r2
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4824      	ldr	r0, [pc, #144]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a38:	f7fb fb6a 	bl	8000110 <__udivsi3>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	0019      	movs	r1, r3
 8004a40:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	227f      	movs	r2, #127	; 0x7f
 8004a48:	4013      	ands	r3, r2
 8004a4a:	434b      	muls	r3, r1
 8004a4c:	617b      	str	r3, [r7, #20]
        break;
 8004a4e:	e00d      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	481c      	ldr	r0, [pc, #112]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a54:	f7fb fb5c 	bl	8000110 <__udivsi3>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	227f      	movs	r2, #127	; 0x7f
 8004a64:	4013      	ands	r3, r2
 8004a66:	434b      	muls	r3, r1
 8004a68:	617b      	str	r3, [r7, #20]
        break;
 8004a6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0f5b      	lsrs	r3, r3, #29
 8004a72:	2207      	movs	r2, #7
 8004a74:	4013      	ands	r3, r2
 8004a76:	3301      	adds	r3, #1
 8004a78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f7fb fb47 	bl	8000110 <__udivsi3>
 8004a82:	0003      	movs	r3, r0
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e015      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2238      	movs	r2, #56	; 0x38
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d103      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2238      	movs	r2, #56	; 0x38
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	d103      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004aa8:	23fa      	movs	r3, #250	; 0xfa
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e001      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ab4:	693b      	ldr	r3, [r7, #16]
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b006      	add	sp, #24
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	00f42400 	.word	0x00f42400
 8004ac8:	007a1200 	.word	0x007a1200

08004acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	20000014 	.word	0x20000014

08004ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ae4:	f7ff fff2 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004ae8:	0004      	movs	r4, r0
 8004aea:	f7ff fb49 	bl	8004180 <LL_RCC_GetAPB1Prescaler>
 8004aee:	0003      	movs	r3, r0
 8004af0:	0b1a      	lsrs	r2, r3, #12
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004af4:	0092      	lsls	r2, r2, #2
 8004af6:	58d3      	ldr	r3, [r2, r3]
 8004af8:	221f      	movs	r2, #31
 8004afa:	4013      	ands	r3, r2
 8004afc:	40dc      	lsrs	r4, r3
 8004afe:	0023      	movs	r3, r4
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bdb0      	pop	{r4, r5, r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	08005c3c 	.word	0x08005c3c

08004b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0a8      	b.n	8004c70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	2382      	movs	r3, #130	; 0x82
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d009      	beq.n	8004b46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	61da      	str	r2, [r3, #28]
 8004b38:	e005      	b.n	8004b46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	225d      	movs	r2, #93	; 0x5d
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	225c      	movs	r2, #92	; 0x5c
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fd f920 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	225d      	movs	r2, #93	; 0x5d
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	438a      	bics	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	23e0      	movs	r3, #224	; 0xe0
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d902      	bls.n	8004b92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e002      	b.n	8004b98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	015b      	lsls	r3, r3, #5
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	23f0      	movs	r3, #240	; 0xf0
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d008      	beq.n	8004bb6 <HAL_SPI_Init+0xaa>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	23e0      	movs	r3, #224	; 0xe0
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d002      	beq.n	8004bb6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	2382      	movs	r3, #130	; 0x82
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6899      	ldr	r1, [r3, #8]
 8004bc4:	2384      	movs	r3, #132	; 0x84
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	400b      	ands	r3, r1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	400b      	ands	r3, r1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	400b      	ands	r3, r1
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2138      	movs	r1, #56	; 0x38
 8004bf2:	400b      	ands	r3, r1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	400b      	ands	r3, r1
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	0011      	movs	r1, r2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2110      	movs	r1, #16
 8004c24:	400b      	ands	r3, r1
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	400b      	ands	r3, r1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68d9      	ldr	r1, [r3, #12]
 8004c36:	23f0      	movs	r3, #240	; 0xf0
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	0011      	movs	r1, r2
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	015b      	lsls	r3, r3, #5
 8004c46:	401a      	ands	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69da      	ldr	r2, [r3, #28]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4907      	ldr	r1, [pc, #28]	; (8004c78 <HAL_SPI_Init+0x16c>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	225d      	movs	r2, #93	; 0x5d
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	fffff7ff 	.word	0xfffff7ff

08004c7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	1cbb      	adds	r3, r7, #2
 8004c8c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c92:	2323      	movs	r3, #35	; 0x23
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	225c      	movs	r2, #92	; 0x5c
 8004c9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x2c>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e1b5      	b.n	8005014 <HAL_SPI_TransmitReceive+0x398>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	225c      	movs	r2, #92	; 0x5c
 8004cac:	2101      	movs	r1, #1
 8004cae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb0:	f7fd fa6c 	bl	800218c <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb8:	201b      	movs	r0, #27
 8004cba:	183b      	adds	r3, r7, r0
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	215d      	movs	r1, #93	; 0x5d
 8004cc0:	5c52      	ldrb	r2, [r2, r1]
 8004cc2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004cca:	2312      	movs	r3, #18
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	1cba      	adds	r2, r7, #2
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cd4:	183b      	adds	r3, r7, r0
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d011      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x84>
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	2382      	movs	r3, #130	; 0x82
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x7a>
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d004      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004cf6:	2323      	movs	r3, #35	; 0x23
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	701a      	strb	r2, [r3, #0]
    goto error;
 8004cfe:	e17e      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x98>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x98>
 8004d0c:	1cbb      	adds	r3, r7, #2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004d14:	2323      	movs	r3, #35	; 0x23
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d1c:	e16f      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	225d      	movs	r2, #93	; 0x5d
 8004d22:	5c9b      	ldrb	r3, [r3, r2]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d003      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	225d      	movs	r2, #93	; 0x5d
 8004d2e:	2105      	movs	r1, #5
 8004d30:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1cba      	adds	r2, r7, #2
 8004d42:	2146      	movs	r1, #70	; 0x46
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1cba      	adds	r2, r7, #2
 8004d4c:	2144      	movs	r1, #68	; 0x44
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1cba      	adds	r2, r7, #2
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1cba      	adds	r2, r7, #2
 8004d64:	8812      	ldrh	r2, [r2, #0]
 8004d66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	23e0      	movs	r3, #224	; 0xe0
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d908      	bls.n	8004d92 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	49a4      	ldr	r1, [pc, #656]	; (800501c <HAL_SPI_TransmitReceive+0x3a0>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	e008      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	0149      	lsls	r1, r1, #5
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d007      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	23e0      	movs	r3, #224	; 0xe0
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d800      	bhi.n	8004dd0 <HAL_SPI_TransmitReceive+0x154>
 8004dce:	e07f      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_SPI_TransmitReceive+0x168>
 8004dd8:	2312      	movs	r3, #18
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d000      	beq.n	8004de4 <HAL_SPI_TransmitReceive+0x168>
 8004de2:	e069      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e08:	e056      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2202      	movs	r2, #2
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d11b      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x1d4>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x1d4>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d113      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	881a      	ldrh	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	1c9a      	adds	r2, r3, #2
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2201      	movs	r2, #1
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d11c      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x21c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2246      	movs	r2, #70	; 0x46
 8004e62:	5a9b      	ldrh	r3, [r3, r2]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	b292      	uxth	r2, r2
 8004e76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2246      	movs	r2, #70	; 0x46
 8004e86:	5a9b      	ldrh	r3, [r3, r2]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b299      	uxth	r1, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2246      	movs	r2, #70	; 0x46
 8004e92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e94:	2301      	movs	r3, #1
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e98:	f7fd f978 	bl	800218c <HAL_GetTick>
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d807      	bhi.n	8004eb8 <HAL_SPI_TransmitReceive+0x23c>
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	3301      	adds	r3, #1
 8004eac:	d004      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004eae:	2323      	movs	r3, #35	; 0x23
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	701a      	strb	r2, [r3, #0]
        goto error;
 8004eb6:	e0a2      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1a3      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x18e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2246      	movs	r2, #70	; 0x46
 8004ec6:	5a9b      	ldrh	r3, [r3, r2]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d19d      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x18e>
 8004ece:	e085      	b.n	8004fdc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x268>
 8004ed8:	2312      	movs	r3, #18
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d000      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x268>
 8004ee2:	e070      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0a:	e05c      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2202      	movs	r2, #2
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d11c      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x2d8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d017      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x2d8>
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d114      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d11e      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x324>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2246      	movs	r2, #70	; 0x46
 8004f66:	5a9b      	ldrh	r3, [r3, r2]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	001a      	movs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2246      	movs	r2, #70	; 0x46
 8004f8e:	5a9b      	ldrh	r3, [r3, r2]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b299      	uxth	r1, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2246      	movs	r2, #70	; 0x46
 8004f9a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fa0:	f7fd f8f4 	bl	800218c <HAL_GetTick>
 8004fa4:	0002      	movs	r2, r0
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d802      	bhi.n	8004fb6 <HAL_SPI_TransmitReceive+0x33a>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_TransmitReceive+0x340>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004fbc:	2323      	movs	r3, #35	; 0x23
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	701a      	strb	r2, [r3, #0]
        goto error;
 8004fc4:	e01b      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d19d      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x290>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2246      	movs	r2, #70	; 0x46
 8004fd4:	5a9b      	ldrh	r3, [r3, r2]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d197      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f94c 	bl	8005280 <SPI_EndRxTxTransaction>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d007      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004fec:	2323      	movs	r3, #35	; 0x23
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	661a      	str	r2, [r3, #96]	; 0x60
 8004ffa:	e000      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004ffc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	225d      	movs	r2, #93	; 0x5d
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	225c      	movs	r2, #92	; 0x5c
 800500a:	2100      	movs	r1, #0
 800500c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800500e:	2323      	movs	r3, #35	; 0x23
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b00a      	add	sp, #40	; 0x28
 800501a:	bd80      	pop	{r7, pc}
 800501c:	ffffefff 	.word	0xffffefff

08005020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	1dfb      	adds	r3, r7, #7
 800502e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005030:	f7fd f8ac 	bl	800218c <HAL_GetTick>
 8005034:	0002      	movs	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005040:	f7fd f8a4 	bl	800218c <HAL_GetTick>
 8005044:	0003      	movs	r3, r0
 8005046:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005048:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	0d1b      	lsrs	r3, r3, #20
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	4353      	muls	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	e058      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	d055      	beq.n	800510a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800505e:	f7fd f895 	bl	800218c <HAL_GetTick>
 8005062:	0002      	movs	r2, r0
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	429a      	cmp	r2, r3
 800506c:	d902      	bls.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x54>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d142      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	21e0      	movs	r1, #224	; 0xe0
 8005080:	438a      	bics	r2, r1
 8005082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	2382      	movs	r3, #130	; 0x82
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	429a      	cmp	r2, r3
 800508e:	d113      	bne.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	429a      	cmp	r2, r3
 800509a:	d005      	beq.n	80050a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	438a      	bics	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d110      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	491a      	ldr	r1, [pc, #104]	; (8005138 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	0189      	lsls	r1, r1, #6
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	225d      	movs	r2, #93	; 0x5d
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	225c      	movs	r2, #92	; 0x5c
 80050f2:	2100      	movs	r1, #0
 80050f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e017      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3b01      	subs	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	425a      	negs	r2, r3
 800511a:	4153      	adcs	r3, r2
 800511c:	b2db      	uxtb	r3, r3
 800511e:	001a      	movs	r2, r3
 8005120:	1dfb      	adds	r3, r7, #7
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d197      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b008      	add	sp, #32
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	20000014 	.word	0x20000014
 8005138:	ffffdfff 	.word	0xffffdfff

0800513c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800514a:	2317      	movs	r3, #23
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005152:	f7fd f81b 	bl	800218c <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005162:	f7fd f813 	bl	800218c <HAL_GetTick>
 8005166:	0003      	movs	r3, r0
 8005168:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005172:	4b41      	ldr	r3, [pc, #260]	; (8005278 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	0013      	movs	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	189b      	adds	r3, r3, r2
 800517c:	00da      	lsls	r2, r3, #3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	4353      	muls	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005188:	e068      	b.n	800525c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	23c0      	movs	r3, #192	; 0xc0
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	429a      	cmp	r2, r3
 8005192:	d10a      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	2117      	movs	r1, #23
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	d055      	beq.n	800525c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b0:	f7fc ffec 	bl	800218c <HAL_GetTick>
 80051b4:	0002      	movs	r2, r0
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	429a      	cmp	r2, r3
 80051be:	d902      	bls.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d142      	bne.n	800524c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	21e0      	movs	r1, #224	; 0xe0
 80051d2:	438a      	bics	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	2382      	movs	r3, #130	; 0x82
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	429a      	cmp	r2, r3
 80051e0:	d113      	bne.n	800520a <SPI_WaitFifoStateUntilTimeout+0xce>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d005      	beq.n	80051fa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d107      	bne.n	800520a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	429a      	cmp	r2, r3
 8005214:	d110      	bne.n	8005238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4916      	ldr	r1, [pc, #88]	; (800527c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005222:	400a      	ands	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	0189      	lsls	r1, r1, #6
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	225d      	movs	r2, #93	; 0x5d
 800523c:	2101      	movs	r1, #1
 800523e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	225c      	movs	r2, #92	; 0x5c
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e010      	b.n	800526e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	3b01      	subs	r3, #1
 800525a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d18e      	bne.n	800518a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b00a      	add	sp, #40	; 0x28
 8005274:	bd80      	pop	{r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	20000014 	.word	0x20000014
 800527c:	ffffdfff 	.word	0xffffdfff

08005280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	23c0      	movs	r3, #192	; 0xc0
 8005290:	0159      	lsls	r1, r3, #5
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	0013      	movs	r3, r2
 800529a:	2200      	movs	r2, #0
 800529c:	f7ff ff4e 	bl	800513c <SPI_WaitFifoStateUntilTimeout>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d007      	beq.n	80052b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a8:	2220      	movs	r2, #32
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e027      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	0013      	movs	r3, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	f7ff fead 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d007      	beq.n	80052da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	2220      	movs	r2, #32
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e014      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	23c0      	movs	r3, #192	; 0xc0
 80052de:	00d9      	lsls	r1, r3, #3
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	0013      	movs	r3, r2
 80052e8:	2200      	movs	r2, #0
 80052ea:	f7ff ff27 	bl	800513c <SPI_WaitFifoStateUntilTimeout>
 80052ee:	1e03      	subs	r3, r0, #0
 80052f0:	d007      	beq.n	8005302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	2220      	movs	r2, #32
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e000      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e046      	b.n	80053ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2288      	movs	r2, #136	; 0x88
 8005322:	589b      	ldr	r3, [r3, r2]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d107      	bne.n	8005338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2284      	movs	r2, #132	; 0x84
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f7fc fdf4 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2288      	movs	r2, #136	; 0x88
 800533c:	2124      	movs	r1, #36	; 0x24
 800533e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2101      	movs	r1, #1
 800534c:	438a      	bics	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f8cc 	bl	80054f0 <UART_SetConfig>
 8005358:	0003      	movs	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e024      	b.n	80053ac <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fa29 	bl	80057c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	490d      	ldr	r1, [pc, #52]	; (80053b4 <HAL_UART_Init+0xa8>)
 800537e:	400a      	ands	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	212a      	movs	r1, #42	; 0x2a
 800538e:	438a      	bics	r2, r1
 8005390:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2101      	movs	r1, #1
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 fac1 	bl	800592c <UART_CheckIdleState>
 80053aa:	0003      	movs	r3, r0
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	ffffb7ff 	.word	0xffffb7ff

080053b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	1dbb      	adds	r3, r7, #6
 80053c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2288      	movs	r2, #136	; 0x88
 80053cc:	589b      	ldr	r3, [r3, r2]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d000      	beq.n	80053d4 <HAL_UART_Transmit+0x1c>
 80053d2:	e088      	b.n	80054e6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_Transmit+0x2a>
 80053da:	1dbb      	adds	r3, r7, #6
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e080      	b.n	80054e8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	015b      	lsls	r3, r3, #5
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d109      	bne.n	8005406 <HAL_UART_Transmit+0x4e>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2201      	movs	r2, #1
 80053fe:	4013      	ands	r3, r2
 8005400:	d001      	beq.n	8005406 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e070      	b.n	80054e8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2290      	movs	r2, #144	; 0x90
 800540a:	2100      	movs	r1, #0
 800540c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2288      	movs	r2, #136	; 0x88
 8005412:	2121      	movs	r1, #33	; 0x21
 8005414:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc feb9 	bl	800218c <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1dba      	adds	r2, r7, #6
 8005422:	2154      	movs	r1, #84	; 0x54
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1dba      	adds	r2, r7, #6
 800542c:	2156      	movs	r1, #86	; 0x56
 800542e:	8812      	ldrh	r2, [r2, #0]
 8005430:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	015b      	lsls	r3, r3, #5
 800543a:	429a      	cmp	r2, r3
 800543c:	d108      	bne.n	8005450 <HAL_UART_Transmit+0x98>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e003      	b.n	8005458 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005458:	e02c      	b.n	80054b4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	0013      	movs	r3, r2
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	f000 faae 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d001      	beq.n	8005474 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e039      	b.n	80054e8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	001a      	movs	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	05d2      	lsls	r2, r2, #23
 8005486:	0dd2      	lsrs	r2, r2, #23
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3302      	adds	r3, #2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e007      	b.n	80054a2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2256      	movs	r2, #86	; 0x56
 80054a6:	5a9b      	ldrh	r3, [r3, r2]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b299      	uxth	r1, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2256      	movs	r2, #86	; 0x56
 80054b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2256      	movs	r2, #86	; 0x56
 80054b8:	5a9b      	ldrh	r3, [r3, r2]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1cc      	bne.n	800545a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	0013      	movs	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	f000 fa7b 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 80054d2:	1e03      	subs	r3, r0, #0
 80054d4:	d001      	beq.n	80054da <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e006      	b.n	80054e8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2288      	movs	r2, #136	; 0x88
 80054de:	2120      	movs	r1, #32
 80054e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
  }
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b008      	add	sp, #32
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054f8:	231a      	movs	r3, #26
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4313      	orrs	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4aa1      	ldr	r2, [pc, #644]	; (80057a4 <UART_SetConfig+0x2b4>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a9c      	ldr	r2, [pc, #624]	; (80057a8 <UART_SetConfig+0x2b8>)
 8005536:	4013      	ands	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a93      	ldr	r2, [pc, #588]	; (80057ac <UART_SetConfig+0x2bc>)
 800555e:	4013      	ands	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	220f      	movs	r2, #15
 8005574:	4393      	bics	r3, r2
 8005576:	0019      	movs	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a89      	ldr	r2, [pc, #548]	; (80057b0 <UART_SetConfig+0x2c0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d127      	bne.n	80055de <UART_SetConfig+0xee>
 800558e:	4b89      	ldr	r3, [pc, #548]	; (80057b4 <UART_SetConfig+0x2c4>)
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	2203      	movs	r2, #3
 8005594:	4013      	ands	r3, r2
 8005596:	2b03      	cmp	r3, #3
 8005598:	d017      	beq.n	80055ca <UART_SetConfig+0xda>
 800559a:	d81b      	bhi.n	80055d4 <UART_SetConfig+0xe4>
 800559c:	2b02      	cmp	r3, #2
 800559e:	d00a      	beq.n	80055b6 <UART_SetConfig+0xc6>
 80055a0:	d818      	bhi.n	80055d4 <UART_SetConfig+0xe4>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <UART_SetConfig+0xbc>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d00a      	beq.n	80055c0 <UART_SetConfig+0xd0>
 80055aa:	e013      	b.n	80055d4 <UART_SetConfig+0xe4>
 80055ac:	231b      	movs	r3, #27
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e021      	b.n	80055fa <UART_SetConfig+0x10a>
 80055b6:	231b      	movs	r3, #27
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e01c      	b.n	80055fa <UART_SetConfig+0x10a>
 80055c0:	231b      	movs	r3, #27
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	2204      	movs	r2, #4
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e017      	b.n	80055fa <UART_SetConfig+0x10a>
 80055ca:	231b      	movs	r3, #27
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	2208      	movs	r2, #8
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e012      	b.n	80055fa <UART_SetConfig+0x10a>
 80055d4:	231b      	movs	r3, #27
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2210      	movs	r2, #16
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x10a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a75      	ldr	r2, [pc, #468]	; (80057b8 <UART_SetConfig+0x2c8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d104      	bne.n	80055f2 <UART_SetConfig+0x102>
 80055e8:	231b      	movs	r3, #27
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e003      	b.n	80055fa <UART_SetConfig+0x10a>
 80055f2:	231b      	movs	r3, #27
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	2210      	movs	r2, #16
 80055f8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	429a      	cmp	r2, r3
 8005604:	d000      	beq.n	8005608 <UART_SetConfig+0x118>
 8005606:	e065      	b.n	80056d4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005608:	231b      	movs	r3, #27
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d015      	beq.n	800563e <UART_SetConfig+0x14e>
 8005612:	dc18      	bgt.n	8005646 <UART_SetConfig+0x156>
 8005614:	2b04      	cmp	r3, #4
 8005616:	d00d      	beq.n	8005634 <UART_SetConfig+0x144>
 8005618:	dc15      	bgt.n	8005646 <UART_SetConfig+0x156>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <UART_SetConfig+0x134>
 800561e:	2b02      	cmp	r3, #2
 8005620:	d005      	beq.n	800562e <UART_SetConfig+0x13e>
 8005622:	e010      	b.n	8005646 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7ff fa5c 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 8005628:	0003      	movs	r3, r0
 800562a:	617b      	str	r3, [r7, #20]
        break;
 800562c:	e012      	b.n	8005654 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562e:	4b63      	ldr	r3, [pc, #396]	; (80057bc <UART_SetConfig+0x2cc>)
 8005630:	617b      	str	r3, [r7, #20]
        break;
 8005632:	e00f      	b.n	8005654 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005634:	f7ff f9c8 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8005638:	0003      	movs	r3, r0
 800563a:	617b      	str	r3, [r7, #20]
        break;
 800563c:	e00a      	b.n	8005654 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	617b      	str	r3, [r7, #20]
        break;
 8005644:	e006      	b.n	8005654 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800564a:	231a      	movs	r3, #26
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
        break;
 8005652:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d100      	bne.n	800565c <UART_SetConfig+0x16c>
 800565a:	e08d      	b.n	8005778 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005660:	4b57      	ldr	r3, [pc, #348]	; (80057c0 <UART_SetConfig+0x2d0>)
 8005662:	0052      	lsls	r2, r2, #1
 8005664:	5ad3      	ldrh	r3, [r2, r3]
 8005666:	0019      	movs	r1, r3
 8005668:	6978      	ldr	r0, [r7, #20]
 800566a:	f7fa fd51 	bl	8000110 <__udivsi3>
 800566e:	0003      	movs	r3, r0
 8005670:	005a      	lsls	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	18d2      	adds	r2, r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	0019      	movs	r1, r3
 8005680:	0010      	movs	r0, r2
 8005682:	f7fa fd45 	bl	8000110 <__udivsi3>
 8005686:	0003      	movs	r3, r0
 8005688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d91c      	bls.n	80056ca <UART_SetConfig+0x1da>
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	025b      	lsls	r3, r3, #9
 8005696:	429a      	cmp	r2, r3
 8005698:	d217      	bcs.n	80056ca <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	b29a      	uxth	r2, r3
 800569e:	200e      	movs	r0, #14
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	210f      	movs	r1, #15
 80056a4:	438a      	bics	r2, r1
 80056a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2207      	movs	r2, #7
 80056b0:	4013      	ands	r3, r2
 80056b2:	b299      	uxth	r1, r3
 80056b4:	183b      	adds	r3, r7, r0
 80056b6:	183a      	adds	r2, r7, r0
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	183a      	adds	r2, r7, r0
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e056      	b.n	8005778 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80056ca:	231a      	movs	r3, #26
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e051      	b.n	8005778 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d4:	231b      	movs	r3, #27
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d015      	beq.n	800570a <UART_SetConfig+0x21a>
 80056de:	dc18      	bgt.n	8005712 <UART_SetConfig+0x222>
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d00d      	beq.n	8005700 <UART_SetConfig+0x210>
 80056e4:	dc15      	bgt.n	8005712 <UART_SetConfig+0x222>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <UART_SetConfig+0x200>
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d005      	beq.n	80056fa <UART_SetConfig+0x20a>
 80056ee:	e010      	b.n	8005712 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7ff f9f6 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 80056f4:	0003      	movs	r3, r0
 80056f6:	617b      	str	r3, [r7, #20]
        break;
 80056f8:	e012      	b.n	8005720 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056fa:	4b30      	ldr	r3, [pc, #192]	; (80057bc <UART_SetConfig+0x2cc>)
 80056fc:	617b      	str	r3, [r7, #20]
        break;
 80056fe:	e00f      	b.n	8005720 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005700:	f7ff f962 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8005704:	0003      	movs	r3, r0
 8005706:	617b      	str	r3, [r7, #20]
        break;
 8005708:	e00a      	b.n	8005720 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	617b      	str	r3, [r7, #20]
        break;
 8005710:	e006      	b.n	8005720 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005716:	231a      	movs	r3, #26
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
        break;
 800571e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d028      	beq.n	8005778 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <UART_SetConfig+0x2d0>)
 800572c:	0052      	lsls	r2, r2, #1
 800572e:	5ad3      	ldrh	r3, [r2, r3]
 8005730:	0019      	movs	r1, r3
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	f7fa fcec 	bl	8000110 <__udivsi3>
 8005738:	0003      	movs	r3, r0
 800573a:	001a      	movs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0019      	movs	r1, r3
 800574a:	0010      	movs	r0, r2
 800574c:	f7fa fce0 	bl	8000110 <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d90a      	bls.n	8005770 <UART_SetConfig+0x280>
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	429a      	cmp	r2, r3
 8005762:	d205      	bcs.n	8005770 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	e003      	b.n	8005778 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	231a      	movs	r3, #26
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	226a      	movs	r2, #106	; 0x6a
 800577c:	2101      	movs	r1, #1
 800577e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2268      	movs	r2, #104	; 0x68
 8005784:	2101      	movs	r1, #1
 8005786:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005794:	231a      	movs	r3, #26
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	781b      	ldrb	r3, [r3, #0]
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b008      	add	sp, #32
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	cfff69f3 	.word	0xcfff69f3
 80057a8:	ffffcfff 	.word	0xffffcfff
 80057ac:	11fff4ff 	.word	0x11fff4ff
 80057b0:	40013800 	.word	0x40013800
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40004400 	.word	0x40004400
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	08005c5c 	.word	0x08005c5c

080057c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	2201      	movs	r2, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	d00b      	beq.n	80057ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a4a      	ldr	r2, [pc, #296]	; (8005908 <UART_AdvFeatureConfig+0x144>)
 80057de:	4013      	ands	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	2202      	movs	r2, #2
 80057f4:	4013      	ands	r3, r2
 80057f6:	d00b      	beq.n	8005810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	4a43      	ldr	r2, [pc, #268]	; (800590c <UART_AdvFeatureConfig+0x148>)
 8005800:	4013      	ands	r3, r2
 8005802:	0019      	movs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	2204      	movs	r2, #4
 8005816:	4013      	ands	r3, r2
 8005818:	d00b      	beq.n	8005832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a3b      	ldr	r2, [pc, #236]	; (8005910 <UART_AdvFeatureConfig+0x14c>)
 8005822:	4013      	ands	r3, r2
 8005824:	0019      	movs	r1, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	2208      	movs	r2, #8
 8005838:	4013      	ands	r3, r2
 800583a:	d00b      	beq.n	8005854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <UART_AdvFeatureConfig+0x150>)
 8005844:	4013      	ands	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	2210      	movs	r2, #16
 800585a:	4013      	ands	r3, r2
 800585c:	d00b      	beq.n	8005876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <UART_AdvFeatureConfig+0x154>)
 8005866:	4013      	ands	r3, r2
 8005868:	0019      	movs	r1, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	2220      	movs	r2, #32
 800587c:	4013      	ands	r3, r2
 800587e:	d00b      	beq.n	8005898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4a25      	ldr	r2, [pc, #148]	; (800591c <UART_AdvFeatureConfig+0x158>)
 8005888:	4013      	ands	r3, r2
 800588a:	0019      	movs	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	4013      	ands	r3, r2
 80058a0:	d01d      	beq.n	80058de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <UART_AdvFeatureConfig+0x15c>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	0019      	movs	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	035b      	lsls	r3, r3, #13
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d10b      	bne.n	80058de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <UART_AdvFeatureConfig+0x160>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	0019      	movs	r1, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	4013      	ands	r3, r2
 80058e6:	d00b      	beq.n	8005900 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <UART_AdvFeatureConfig+0x164>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}
 8005908:	fffdffff 	.word	0xfffdffff
 800590c:	fffeffff 	.word	0xfffeffff
 8005910:	fffbffff 	.word	0xfffbffff
 8005914:	ffff7fff 	.word	0xffff7fff
 8005918:	ffffefff 	.word	0xffffefff
 800591c:	ffffdfff 	.word	0xffffdfff
 8005920:	ffefffff 	.word	0xffefffff
 8005924:	ff9fffff 	.word	0xff9fffff
 8005928:	fff7ffff 	.word	0xfff7ffff

0800592c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af02      	add	r7, sp, #8
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2290      	movs	r2, #144	; 0x90
 8005938:	2100      	movs	r1, #0
 800593a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800593c:	f7fc fc26 	bl	800218c <HAL_GetTick>
 8005940:	0003      	movs	r3, r0
 8005942:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2208      	movs	r2, #8
 800594c:	4013      	ands	r3, r2
 800594e:	2b08      	cmp	r3, #8
 8005950:	d10c      	bne.n	800596c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	0391      	lsls	r1, r2, #14
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <UART_CheckIdleState+0x98>)
 800595c:	9200      	str	r2, [sp, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	f000 f832 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 8005964:	1e03      	subs	r3, r0, #0
 8005966:	d001      	beq.n	800596c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e026      	b.n	80059ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2204      	movs	r2, #4
 8005974:	4013      	ands	r3, r2
 8005976:	2b04      	cmp	r3, #4
 8005978:	d10c      	bne.n	8005994 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	03d1      	lsls	r1, r2, #15
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <UART_CheckIdleState+0x98>)
 8005984:	9200      	str	r2, [sp, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	f000 f81e 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d001      	beq.n	8005994 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e012      	b.n	80059ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2288      	movs	r2, #136	; 0x88
 8005998:	2120      	movs	r1, #32
 800599a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	228c      	movs	r2, #140	; 0x8c
 80059a0:	2120      	movs	r1, #32
 80059a2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2284      	movs	r2, #132	; 0x84
 80059b4:	2100      	movs	r1, #0
 80059b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b004      	add	sp, #16
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	01ffffff 	.word	0x01ffffff

080059c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b094      	sub	sp, #80	; 0x50
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	1dfb      	adds	r3, r7, #7
 80059d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d8:	e0a7      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059dc:	3301      	adds	r3, #1
 80059de:	d100      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80059e0:	e0a3      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fc fbd3 	bl	800218c <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13f      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f8:	f3ef 8310 	mrs	r3, PRIMASK
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	f383 8810 	msr	PRIMASK, r3
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	494e      	ldr	r1, [pc, #312]	; (8005b54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	f383 8810 	msr	PRIMASK, r3
}
 8005a28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a32:	643b      	str	r3, [r7, #64]	; 0x40
 8005a34:	2301      	movs	r3, #1
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2288      	movs	r2, #136	; 0x88
 8005a60:	2120      	movs	r1, #32
 8005a62:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	228c      	movs	r2, #140	; 0x8c
 8005a68:	2120      	movs	r1, #32
 8005a6a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2284      	movs	r2, #132	; 0x84
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e069      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	4013      	ands	r3, r2
 8005a82:	d052      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	401a      	ands	r2, r3
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d148      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	0112      	lsls	r2, r2, #4
 8005aa0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa6:	613b      	str	r3, [r7, #16]
  return(result);
 8005aa8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4924      	ldr	r1, [pc, #144]	; (8005b54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ac4:	400a      	ands	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f383 8810 	msr	PRIMASK, r3
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ada:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ade:	2301      	movs	r3, #1
 8005ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f383 8810 	msr	PRIMASK, r3
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2101      	movs	r1, #1
 8005af6:	438a      	bics	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2288      	movs	r2, #136	; 0x88
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	228c      	movs	r2, #140	; 0x8c
 8005b12:	2120      	movs	r1, #32
 8005b14:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2290      	movs	r2, #144	; 0x90
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2284      	movs	r2, #132	; 0x84
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e010      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	425a      	negs	r2, r3
 8005b3a:	4153      	adcs	r3, r2
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	001a      	movs	r2, r3
 8005b40:	1dfb      	adds	r3, r7, #7
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d100      	bne.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x182>
 8005b48:	e747      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b014      	add	sp, #80	; 0x50
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	fffffe5f 	.word	0xfffffe5f

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4d0c      	ldr	r5, [pc, #48]	; (8005b90 <__libc_init_array+0x38>)
 8005b5e:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	2600      	movs	r6, #0
 8005b6a:	f000 f82b 	bl	8005bc4 <_init>
 8005b6e:	4d0a      	ldr	r5, [pc, #40]	; (8005b98 <__libc_init_array+0x40>)
 8005b70:	4c0a      	ldr	r4, [pc, #40]	; (8005b9c <__libc_init_array+0x44>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	00b3      	lsls	r3, r6, #2
 8005b7e:	58eb      	ldr	r3, [r5, r3]
 8005b80:	4798      	blx	r3
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	00b3      	lsls	r3, r6, #2
 8005b88:	58eb      	ldr	r3, [r5, r3]
 8005b8a:	4798      	blx	r3
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08005c74 	.word	0x08005c74
 8005b94:	08005c74 	.word	0x08005c74
 8005b98:	08005c74 	.word	0x08005c74
 8005b9c:	08005c78 	.word	0x08005c78

08005ba0 <memcpy>:
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d100      	bne.n	8005baa <memcpy+0xa>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	5ccc      	ldrb	r4, [r1, r3]
 8005bac:	54c4      	strb	r4, [r0, r3]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	e7f8      	b.n	8005ba4 <memcpy+0x4>

08005bb2 <memset>:
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	1882      	adds	r2, r0, r2
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d100      	bne.n	8005bbc <memset+0xa>
 8005bba:	4770      	bx	lr
 8005bbc:	7019      	strb	r1, [r3, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	e7f9      	b.n	8005bb6 <memset+0x4>
	...

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
